<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DappWind</title>
  
  <subtitle>W.IND.SS.ON</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.dappwind.com/"/>
  <updated>2020-05-03T12:54:20.291Z</updated>
  <id>https://blog.dappwind.com/</id>
  
  <author>
    <name>DappWind</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter桌面端调研</title>
    <link href="https://blog.dappwind.com/2020/03/17/"/>
    <id>https://blog.dappwind.com/2020/03/17/</id>
    <published>2020-03-17T12:41:18.000Z</published>
    <updated>2020-05-03T12:54:20.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter桌面端调研"><a href="#Flutter桌面端调研" class="headerlink" title="Flutter桌面端调研"></a>Flutter桌面端调研</h1><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9c786a6106cd?w=2244&amp;h=1562&amp;f=png&amp;s=3989010" alt></p><p>官方文档</p><blockquote><p><a href="https://flutter.dev/desktop" target="_blank" rel="noopener">https://flutter.dev/desktop</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们要做桌面版的客户端，有原生和RN两种选择。因为之前开发过flutter，记得flutter也支持桌面端，所以就试用了下。</p><p>flutter的介绍及开发见这篇文章</p><blockquote><p><a href="https://blog.dappwind.com/2019/09/01/index.html">https://blog.dappwind.com/2019/09/01/index.html</a></p></blockquote><h3 id="打包好的Demo例子"><a href="#打包好的Demo例子" class="headerlink" title="打包好的Demo例子"></a>打包好的Demo例子</h3><p>雪糕应用广场 桌面端</p><p>mac版下载:  </p><blockquote><p><a href="https://file.dappwind.com/snb_store_flutter.zip" target="_blank" rel="noopener">https://file.dappwind.com/snb_store_flutter.zip</a></p></blockquote><p>windows: </p><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><p>很流畅，交互效果媲美app。</p><h1 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h1><p>需要用dart语言写。</p><p>目前materal UI大部分是为移动端设计的，如果想桌面端使用的话，需要修改。无法使用常见的web ui框架。</p><p>不过如果以后app也接入flutter的话，可以实现大量的代码复用。以“雪糕”为例，原有的app代码直接可以生成桌面版。</p><h1 id="项目进度"><a href="#项目进度" class="headerlink" title="项目进度"></a>项目进度</h1><p>还在开发中，mac版已合入主分支，windows版还未合入主分支，但是也可以预览。</p><h1 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h1><p>目前生态还在完善，市面上还没有人用到。第三方包比不上web端的多，但基本能找到。比如行情图 <a href="https://pub.dev/packages/syncfusion_flutter_charts" target="_blank" rel="noopener">https://pub.dev/packages/syncfusion_flutter_charts</a></p><h1 id="体积大小"><a href="#体积大小" class="headerlink" title="体积大小"></a>体积大小</h1><p>空项目生成包大概60M，雪糕生成包67M，zip压缩后20M</p><h1 id="菜单栏设置"><a href="#菜单栏设置" class="headerlink" title="菜单栏设置"></a>菜单栏设置</h1><p><a href="https://github.com/google/flutter-desktop-embedding/tree/master/plugins/menubar" target="_blank" rel="noopener">https://github.com/google/flutter-desktop-embedding/tree/master/plugins/menubar</a></p><p>目前支持mac 导航栏设置、支持快捷键。</p><p>windows的还在开发中：</p><p><a href="https://github.com/google/flutter-desktop-embedding/issues/105" target="_blank" rel="noopener">https://github.com/google/flutter-desktop-embedding/issues/105</a></p><h1 id="系统通知"><a href="#系统通知" class="headerlink" title="系统通知"></a>系统通知</h1><p>暂时没有找到</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>支持，需要权限</p><h1 id="应用更新"><a href="#应用更新" class="headerlink" title="应用更新"></a>应用更新</h1><p>官方没有提供，需自行设计</p><p><a href="https://github.com/google/flutter-desktop-embedding/issues/469" target="_blank" rel="noopener">https://github.com/google/flutter-desktop-embedding/issues/469</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flutter桌面端调研&quot;&gt;&lt;a href=&quot;#Flutter桌面端调研&quot; class=&quot;headerlink&quot; title=&quot;Flutter桌面端调研&quot;&gt;&lt;/a&gt;Flutter桌面端调研&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cd
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flutter在雪球应用广场的实践</title>
    <link href="https://blog.dappwind.com/2019/09/01/"/>
    <id>https://blog.dappwind.com/2019/09/01/</id>
    <published>2019-09-01T10:27:47.000Z</published>
    <updated>2020-05-03T12:44:48.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>雪球目前有3个App，雪球、蛋卷基金、雪盈证券，每个app又有各种版本比如feat、rc、sep等等。在开发阶段打出包后，如何能让开发同学测试同学，设计同学，产品经理等快速找到，并方便的安装到手机上？很旧之前是有个网页提供下载，但是年久失修，没有分类不支持搜索，安装也不太方便。所以就有了重构雪球应用广场的需求。</p><p>整个重构包括打包优化，后台接口，与前台界面。这里主要介绍前台界面。</p><p>19年7月，开始做这个app，大概一个月的时间，从入门学习到公司内部上线，完成3端开发，Android iOS web。也体现出了flutter的优势。</p><p>app样子如下:<br><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9baa5445a9a3?w=2498&amp;h=1420&amp;f=png&amp;s=1121812" alt></p><h1 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h1><p>最近flutter异常火热，Flutter是Google开源的跨端UI工具包，能一套代码提供ios android web三端的应用。我们基础研发平台也一直想在雪球内部试用下，当个快速试错者，帮助大家快速踩坑。正好借这个重构的契机，所以选取了flutter的跨端开发框架。结果证明确实很香，没让我们失望。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9bd2e52772eb?w=1158&amp;h=579&amp;f=png&amp;s=103413" alt></p><p>我们看这个图，除了手机端和web端之外，flutter也是支持电脑端应用和嵌入式应用的开发，除了想跟React Native PK 之外，还想跟桌面端开发框架electron及嵌入式C语言PK下。另外也是谷歌另一个新系统Fuchsia的主要开发方式。</p><h1 id="Flutter的优点"><a href="#Flutter的优点" class="headerlink" title="Flutter的优点"></a>Flutter的优点</h1><p>为什么这么多厂商使用flutter，根据我近段时间开发flutter的新得体会，列出几点。</p><h2 id="1-跨平台，渲染一致，一套代码，多端使用"><a href="#1-跨平台，渲染一致，一套代码，多端使用" class="headerlink" title="1.跨平台，渲染一致，一套代码，多端使用"></a>1.跨平台，渲染一致，一套代码，多端使用</h2><p>首先是他的跨平台真的做的很好，不同平台渲染一致性很高，真正做到了一套代码多端运行，而不是像之前的跨端方案 一套代码 多端修改适配。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9c2eba4b993c?w=2458&amp;h=1282&amp;f=png&amp;s=1010956" alt></p><p>这个图是雪糕应用在不同系统下的样子，UI几乎无差别，开发的时候不需要关注平台，android和ios的适配基本没花多长时间。</p><p>当时令我眼前一亮的一点是他竟然能把这种一致性延申到了web上。因为当时开发的时候，flutter还是1.7版本，官方还不支持web h5, 所以对能否做出web版没抱任何希望，当时想的是单独开发一套出h5版, 后来客户端开发完后，尝试性用内测分支flutter_web 适配了下，发现还是可以用的。UI体验与客户端差不多，除了有些bug与卡顿。所以既然web也能支持，我想他们之后说的桌面端和嵌入式也很期待。现在1.9 版本 web已经支持了，不用像我开发时，做大量的安装和适配工作了。</p><p>另外值得一提的是桌面版，在今年（2020）我们桌面版选型时，我试用了下flutter桌面版的生成，只需升级下flutter版本，没有任何代码改动就打出了flutter桌面版，界面效果很优秀。后续会有个flutter桌面版的试用分析文章。</p><blockquote><p><a href="https://blog.dappwind.com/2020/03/17">https://blog.dappwind.com/2020/03/17</a></p></blockquote><h2 id="2-开发效率高"><a href="#2-开发效率高" class="headerlink" title="2.开发效率高"></a>2.开发效率高</h2><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9c95b5c00b7e?w=2252&amp;h=1234&amp;f=png&amp;s=612466" alt></p><p>之前客户端同学一直羡慕我们前端同学开发效率高，代码改动后只要保存下，就能直接在界面上看到效果。 flutter也支持热重载这个功能。可以提高开发效率。另外就是编辑器的代码补全，每个组件代码前面都有个一个电灯泡，可以直接选择添加哪些代码片段，并不是简单的代码很智能，减少了手动敲重复代码，提高开发效率。</p><h2 id="3-UI可深度定制，"><a href="#3-UI可深度定制，" class="headerlink" title="3.UI可深度定制，"></a>3.UI可深度定制，</h2><p>第三点就是UI可深度定制，性能媲美原生应用，可以通过下面这个视频看一下。</p><video id="video" controls preload="false"><br><source id="mp4" src="https://flutter.dev/videos/Filters.mp4" type="video/mp4"><br></video><h1 id="Flutter-的优点是怎么实现的"><a href="#Flutter-的优点是怎么实现的" class="headerlink" title="Flutter 的优点是怎么实现的"></a>Flutter 的优点是怎么实现的</h1><p>为什么会有这些优点，我们简单看一下flutter的框架，底层不调用原生组件，都是用skia引擎画出，所以能有很高的跨平台一致性，UI深度定制性，性能好。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9ce6c87b25d5?w=2392&amp;h=1358&amp;f=png&amp;s=260090" alt></p><h2 id="Dart语言"><a href="#Dart语言" class="headerlink" title="Dart语言"></a>Dart语言</h2><p>而开发热重载则是Dart语言的一个优势。Dart支持两种模式</p><p><code>JIT</code> (Just-In-Time - 实时编译)  解释模式 </p><p><code>AOT</code> (Ahead-Of-Time - 预先编译)  编译模式</p><p>debug模式下使用的是解释模式，跟js一样，所以支持热重载，发布打包时，会先编译，性能比js好得多。所以也是flutter性能媲美原生的原因。</p><p>1.Dart 的性能更好。</p><p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p><p>2.Native Binding。</p><p>在 Android上，v8的 Native Binding可以很好地实现，但是 iOS上的 JavaScriptCore不可以，所以如果使用 JavaScript，Flutter 基础框架的代码模式就很难统一了。而 Dart的 Native Binding可以很好地通过 Dart Lib实现。</p><p>3.Dart是类型安全的语言，拥有完善的包管理和诸多特性。</p><p>Google召集了如此多个编程语言界的设计专家开发出这样一门语言，旨在取代 JavaScript，所以 Fuchsia OS内置了 Dart。Dart可以作为 embedded lib嵌入应用，而不用只能随着系统升级才能获得更新，这也是优势之一。</p><p>4.Dart 2.5 支持了ML代码补全，调用C语言等功能</p><h2 id="Flutter项目结构"><a href="#Flutter项目结构" class="headerlink" title="Flutter项目结构"></a>Flutter项目结构</h2><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9d55e4fcbd66?w=2068&amp;h=1300&amp;f=png&amp;s=359923" alt></p><h1 id="Flutter编程思想"><a href="#Flutter编程思想" class="headerlink" title="Flutter编程思想"></a>Flutter编程思想</h1><p>一切皆 Widget<br>Widget 是 Flutter 应用用户界面的基本构建单元，每个 widget 都与最终的用户界面的展示紧密相关。不同于其他框架和平台 —— 将视图 (views)、视图控制器 (view controllers)、布局 (layouts) 等其他属性分开，Flutter 拥有统一的对象模型：widget。<br>一个 widget 可以定义：</p><ul><li>一个结构元素（比如一个按钮或者菜单）</li><li>一个风格元素（比如一个字体或者配色方案）</li><li>布局的一个方面（比如 padding）</li><li>等等……</li></ul><p>是声明式UI，一切都是widget,  一切都是小组件。<br>触摸操作也是组件。</p><p>下面是一个widget组件的例子，雪糕里有很多不同的app图标，大小，种类，有无边框会有些区别。所以封装成了组件，暴露参数 为 app内容，宽度，有无边框。</p><p>边框和背景图为最外层widget，里面有个文字的widegt.</p><p>这就是全部的icon组件代码。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9d7946119db7?w=2434&amp;h=1250&amp;f=png&amp;s=634066" alt></p><h1 id="Flutter-插件-包管理"><a href="#Flutter-插件-包管理" class="headerlink" title="Flutter 插件/包管理"></a>Flutter 插件/包管理</h1><p>类似前端 npm , 我问了下客户端的同事，引用第三方的包时，需要直接上github上搜索，并手动下载。比较麻烦，这个pub.dev就采取了前端开发包管理的方式，是个单独的网站，直接搜索，然后添加到pubspec.yaml里面就行。会自动安装。</p><p>雪糕用到的插件如下：<br><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9d882c227db5?w=1004&amp;h=622&amp;f=png&amp;s=120661" alt></p><p>以分享插件为例<br><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9d94051341e5?w=2364&amp;h=1256&amp;f=png&amp;s=576998" alt></p><h1 id="雪糕主要功能及其实现方式"><a href="#雪糕主要功能及其实现方式" class="headerlink" title="雪糕主要功能及其实现方式"></a>雪糕主要功能及其实现方式</h1><blockquote><p>1.顶部动画及导航栏  -  NestedScrollView / headerSliverBuilder / SliverPersistentHeaderDelegate 画出</p></blockquote><blockquote><p>2.网络请求及页面间数据通信 - http / JSON / event_bus</p></blockquote><blockquote><p>3.应用内下载及安装 - android: flutter_downloader &amp; path_provider /  iOS: url_launcher / web: dart open </p></blockquote><blockquote><p>4.搜索功能 - SearchDelegate</p></blockquote><blockquote><p>5.页面框架 - Scaffold / ListView</p></blockquote><blockquote><p>6.封装组件 - 列表组件 / 卡片组件 / icon组件</p></blockquote><blockquote><p>7.判断系统环境 - device_info</p></blockquote><p>这个地方罗列了一些主要的效果与功能，我们选取两个来具体说下，</p><h2 id="首先是顶部动画和导航栏"><a href="#首先是顶部动画和导航栏" class="headerlink" title="首先是顶部动画和导航栏"></a>首先是顶部动画和导航栏</h2><video id="video" controls preload="false"><br><source id="mp4" src="https://blogyu.oss-cn-beijing.aliyuncs.com/video/%E9%A1%B6%E9%83%A8480.mov" type="video/mp4"><br></video><p>我们的设计师设计了非常好看的顶部效果和导航栏样式，使用flutter自带的materal design的UI组件不能满足需求。导航栏背景是个可以动的图片背景，一直延伸到系统状态栏。并且顶部滑动效果，背景多个元素是差速移动的，另外，卡片是压在背景上方，上滑到某一位置后，卡片开始被收到状态栏背景下方。并且还要适配机型与屏幕。</p><p>由于刚开始用flutter, 看到设计稿时感觉flutter做不到这个效果，完全没有头绪，后来弄了好几天，换了3个方案，基本实现了这个动效</p><p>没有用flutter提供的appbar 相当于自己画了一个。因为flutter有stack层叠的概念，将差速移动的各个元素放在不同图层，每个的定位都加一个运动曲线公式。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9e07193c9a6f?w=2520&amp;h=1418&amp;f=png&amp;s=1047284" alt></p><p>代码大概结构如下 stack 元素  堆叠了 5个 positioned 图层</p><p>开发时还遇到了 listview滚动与appbanner 滚动事件冲突的问题，也是花费了些时间解决，又遇到类似问题的同学可以参考下git代码。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9e10ca38ed06?w=1069&amp;h=1230&amp;f=png&amp;s=337945" alt></p><h2 id="另外介绍下雪糕内安装app的实现方式"><a href="#另外介绍下雪糕内安装app的实现方式" class="headerlink" title="另外介绍下雪糕内安装app的实现方式"></a>另外介绍下雪糕内安装app的实现方式</h2><p>安装app   ios 与 android很不一样，ios安装直接safari打开一个plist链接。所以用到了url_launcher 这个插件，他会打开链接进而进行安装。</p><p>安卓需要先下载再安装，安卓下载涉及到队列数据库等等设置，可以参考flutter_downloader 的说明文档。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9e21446b4195?w=2126&amp;h=1140&amp;f=png&amp;s=785750" alt></p><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9e2eaa2868c1?w=2378&amp;h=1016&amp;f=png&amp;s=606435" alt></p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p><img src="https://user-gold-cdn.xitu.io/2020/5/3/171d9e3560ed897e?w=2364&amp;h=1342&amp;f=png&amp;s=471426" alt></p><h1 id="RN对比"><a href="#RN对比" class="headerlink" title="RN对比"></a>RN对比</h1><p>RN采用原生组件，与系统内的一致性强，但是ios跟android有些差异</p><p>第三方包活跃</p><p>RN list有些性能问题</p><h1 id="Flutter遇到的问题"><a href="#Flutter遇到的问题" class="headerlink" title="Flutter遇到的问题"></a>Flutter遇到的问题</h1><p>1.SliverAppBar 与 scroll controler 冲突</p><blockquote><p>SliverAppBar will not collapse when ListView is scrolled<br>来自 <a href="https://github.com/flutter/flutter/issues/26243" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/26243</a> </p></blockquote><blockquote><p><a href="https://stackoverflow.com/questions/46817189/sliverappbar-and-listview-with-controller/46853315#46853315" target="_blank" rel="noopener">https://stackoverflow.com/questions/46817189/sliverappbar-and-listview-with-controller/46853315#46853315</a></p></blockquote><p>Listview tabbarview 在 customscrollview 中<br>List 滚动不会引起 appbar滚动</p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>NestedScrollView 中的 headerSliverBuilder</p><p>NestedScrollView 不只可以用 <code>SliverAppBar</code> 还可以接受 <code>SliverPersistentHeader</code></p><p>而 <code>SliverPersistentHeader</code> 中可处理滑动，结合<code>NotificationListener</code>可实现滚动效果。</p><p>2.Future 异步 需在页面切换走后 停止，否则setState报错</p><blockquote><p><a href="https://stackoverflow.com/questions/49340116/setstate-called-after-dispose" target="_blank" rel="noopener">https://stackoverflow.com/questions/49340116/setstate-called-after-dispose</a><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mounted)&#123;</span><br><span class="line"> setState(()&#123;</span><br><span class="line">  <span class="comment">//Your state change code goes here</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>3.Text hero </p><p>颜色会变红，字体会变，会换行</p><blockquote><p><a href="https://github.com/flutter/flutter/issues/10246" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/10246</a><br><a href="https://github.com/flutter/flutter/issues/30647" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/30647</a></p></blockquote><p>Text hero<br>设置颜色、设置字体、设置宽度，依旧效果不太好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;雪球目前有3个App，雪球、蛋卷基金、雪盈证券，每个app又有各种版本比如feat、rc、sep等等。在开发阶段打出包后，如何能让开发同学测
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES APM 监控报警</title>
    <link href="https://blog.dappwind.com/2019/06/24/"/>
    <id>https://blog.dappwind.com/2019/06/24/</id>
    <published>2019-06-24T07:51:40.000Z</published>
    <updated>2020-04-06T12:00:08.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-背景"><a href="#一-背景" class="headerlink" title="一.背景"></a>一.背景</h2><p>日志数据和apm数据被es处理后，能配置出可视化的查询图表，能及时了解server和网站的实时运行情况，但是还是需要人工定时查看。所以对es采集处理后的分类数据和图表，实现自动监控和报警的功能</p><h2 id="二-方案"><a href="#二-方案" class="headerlink" title="二.方案"></a>二.方案</h2><h3 id="1-es-自己的watcher-alert-功能"><a href="#1-es-自己的watcher-alert-功能" class="headerlink" title="1.es 自己的watcher alert 功能"></a>1.es 自己的watcher alert 功能</h3><p>es 的 basic 授权license不带 watcher功能，需要购买 GOLD license</p><blockquote><p><a href="https://www.elastic.co/subscriptions" target="_blank" rel="noopener">https://www.elastic.co/subscriptions</a></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/6/24/16b896c8806ca587?w=2360&amp;h=1216&amp;f=png&amp;s=145974" alt></p><h3 id="2-单独的开源alert服务"><a href="#2-单独的开源alert服务" class="headerlink" title="2.单独的开源alert服务"></a>2.单独的开源alert服务</h3><p><a href="https://github.com/daaru00/es-alert" target="_blank" rel="noopener">https://github.com/daaru00/es-alert</a></p><p><a href="https://github.com/Akagi201/esalert" target="_blank" rel="noopener">https://github.com/Akagi201/esalert</a></p><p>缺点：无可视化配置界面，用的人不多</p><h3 id="3-采用grafana-alert"><a href="#3-采用grafana-alert" class="headerlink" title="3.采用grafana alert"></a>3.采用grafana alert</h3><p>grafana 自带一个go的server服务，可实现可视化报警配置，可以很方便的配置成钉钉群报警机器人。</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/24/16b896cc8f491ab1?w=654&amp;h=513&amp;f=png&amp;s=191626" alt></p><h2 id="三-配置"><a href="#三-配置" class="headerlink" title="三.配置"></a>三.配置</h2><h3 id="1-grafana-添加es-为database"><a href="#1-grafana-添加es-为database" class="headerlink" title="1.grafana 添加es 为database"></a>1.grafana 添加es 为database</h3><p>index name 跟kibana的index一样即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/24/16b896df9b88fe13?w=577&amp;h=1008&amp;f=png&amp;s=160871" alt></p><p>点击测试，提示成功。</p><h3 id="2-配置查询语句，生成图表"><a href="#2-配置查询语句，生成图表" class="headerlink" title="2.配置查询语句，生成图表"></a>2.配置查询语句，生成图表</h3><p>查询语句可以在kibana中测试，没问题后再复制到grafana,grafana的数据展示还支持函数处理，感觉比kibana强大方便些，而且更快。</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/24/16b896ec6a3aa6bc?w=821&amp;h=630&amp;f=png&amp;s=132001" alt></p><h3 id="3-配置报警"><a href="#3-配置报警" class="headerlink" title="3.配置报警"></a>3.配置报警</h3><p>每个图表可以配置单独的报警，选择方便的钉钉机器人即可。</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/24/16b896ef9bb1fa5e?w=825&amp;h=539&amp;f=png&amp;s=120820" alt></p><p><img src="https://user-gold-cdn.xitu.io/2019/6/24/16b896f22011551d?w=665&amp;h=521&amp;f=png&amp;s=90626" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-背景&quot;&gt;&lt;a href=&quot;#一-背景&quot; class=&quot;headerlink&quot; title=&quot;一.背景&quot;&gt;&lt;/a&gt;一.背景&lt;/h2&gt;&lt;p&gt;日志数据和apm数据被es处理后，能配置出可视化的查询图表，能及时了解server和网站的实时运行情况，但是还是需要人工定时
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vscode 调试 Webpack Debug</title>
    <link href="https://blog.dappwind.com/2019/06/14/"/>
    <id>https://blog.dappwind.com/2019/06/14/</id>
    <published>2019-06-14T07:51:40.000Z</published>
    <updated>2020-04-06T12:00:08.745Z</updated>
    
    <content type="html"><![CDATA[<p>vscode可方便的调试webpack打包</p><p>添加debug配置即可</p><p>可以在node_modules 里面的loader中打断点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Launch webapck"</span>,</span><br><span class="line">      <span class="string">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/node_modules/webpack/bin/webpack.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vscode可方便的调试webpack打包&lt;/p&gt;
&lt;p&gt;添加debug配置即可&lt;/p&gt;
&lt;p&gt;可以在node_modules 里面的loader中打断点&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gulp老项目升级为webpack打包及相关优化</title>
    <link href="https://blog.dappwind.com/2019/05/25/"/>
    <id>https://blog.dappwind.com/2019/05/25/</id>
    <published>2019-05-25T07:26:33.000Z</published>
    <updated>2020-04-06T12:00:08.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><ol><li><p>vue 和 js 改为webpack打包 </p><ul><li>升级babel</li><li>引入webpack config</li><li>添加webpack loader</li><li>生成入口列表 entry</li><li>结合到gulp流程</li><li>增加可视化打包分析</li></ul></li><li><p>开发模式热更新</p><ul><li>webpack-dev-server</li></ul></li><li><p>vue 拆分多入口 实现按需加载 按需引用vue-component</p><ul><li>vue 文件入口 为指定入口 </li><li>vue-web</li><li>vue-mobile</li><li>vue-article</li><li>vue-home</li><li>vue-stock </li></ul></li><li><p>vue 公共资源抽离vue-common</p><ul><li>增加splitChunks</li><li>chunks 设置 只抽取vue部分</li></ul></li><li><p>js 引用方式修改为 从vue引入</p><ul><li>减少体积</li><li>不用手动控制js加载</li></ul></li><li><p>拆分vue路由</p></li><li><p>lodash 按需引用 去除全局lodash</p><ul><li>减小体积</li><li>避免冲突</li></ul></li><li><p>js资源 preload</p><ul><li>加快速度</li></ul></li><li><p>vue warning 解决</p><ul><li>之前的打包方式 不会有warning提示</li></ul></li><li>confirm modal 拆分（暂缓）<ul><li>新增的考虑拆分</li></ul></li><li>poliyfill<ul><li>单独引用 30k</li></ul></li></ol><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>snowman项目采用<code>pug</code>渲染 + <code>vue</code>渲染结合，vue渲染部分js资源未按需加载，页面加载全部的js</p><h1 id="一-vue-和-js-改为webpack打包"><a href="#一-vue-和-js-改为webpack打包" class="headerlink" title="一. vue 和 js 改为webpack打包"></a>一. vue 和 js 改为webpack打包</h1><h2 id="1-升级babel"><a href="#1-升级babel" class="headerlink" title="1.升级babel"></a>1.升级babel</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "@babel/cli": "^7.4.4",</span><br><span class="line">    "@babel/core": "^7.4.4",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.babelrc 改用preset-env<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"targets"</span>: &#123;</span><br><span class="line">          <span class="attr">"browsers"</span>: [</span><br><span class="line">            <span class="string">"Android &gt;= 4.0"</span>,</span><br><span class="line">            <span class="string">"ios &gt;= 9"</span>,</span><br><span class="line">            <span class="string">"ie 9"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-syntax-dynamic-import"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line">    [<span class="string">"import"</span>, &#123;</span><br><span class="line">      <span class="attr">"libraryName"</span>: <span class="string">"lodash"</span>,</span><br><span class="line">      <span class="attr">"libraryDirectory"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"camel2DashComponentName"</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>node入口babel升级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'@babel/register'</span>)(&#123;</span><br><span class="line">  presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'@babel/polyfill'</span>);</span><br></pre></td></tr></table></figure><h2 id="2-引入webpack-config"><a href="#2-引入webpack-config" class="headerlink" title="2.引入webpack config"></a>2.引入webpack config</h2><p><code>webpack.common.js</code></p><p><code>webpack.dev.js</code></p><p><code>webpack.prod.js</code></p><h4 id="entry-打包入口"><a href="#entry-打包入口" class="headerlink" title="entry 打包入口"></a>entry 打包入口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;vue-web&apos;: &apos;./src/vue/web.js&apos;,</span><br><span class="line">&apos;vue-mobile&apos;: &apos;./src/vue/mobile.js&apos;,</span><br></pre></td></tr></table></figure><h2 id="3-添加webpack-loader"><a href="#3-添加webpack-loader" class="headerlink" title="3.添加webpack loader"></a>3.添加webpack loader</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      loader: <span class="string">'vue-loader'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// this applies to &lt;template lang="pug"&gt; in Vue components</span></span><br><span class="line">      test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">      oneOf: [</span><br><span class="line">        <span class="comment">// 这条规则应用到 Vue 组件内的 `&lt;template lang="pug"&gt;`</span></span><br><span class="line">        &#123;</span><br><span class="line">          resourceQuery: <span class="regexp">/^\?vue/</span>,</span><br><span class="line">          use: [<span class="string">'pug-plain-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 这条规则应用到 JavaScript 内的 pug 导入</span></span><br><span class="line">        &#123;</span><br><span class="line">          use: [<span class="string">'pug-loader'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   test: /\.(css|less)$/,</span></span><br><span class="line">    <span class="comment">//   use: [MiniCssExtractPlugin.loader, 'css-loader', 'less-loader']</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      <span class="comment">// include: /src/,</span></span><br><span class="line">      loader: <span class="string">'babel-loader?cacheDirectory=true'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="4-增加可视化打包分析"><a href="#4-增加可视化打包分析" class="headerlink" title="4.增加可视化打包分析"></a>4.增加可视化打包分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.VISU) &#123;</span><br><span class="line">  common.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">    analyzerHost: <span class="string">'localhost'</span>,</span><br><span class="line">    analyzerPort: <span class="string">'8080'</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>npm run visu</code> 即可浏览</p><p>分析最开始的vue-web.js 为500k </p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aeddba09f491b9?w=927&amp;h=1145&amp;f=png&amp;s=331827" alt></p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aeddbbeaac50ea?w=1242&amp;h=1255&amp;f=png&amp;s=764666" alt></p><p>发现是snbchart和moment-timezone 错误引用造成的</p><p>查找问题发现</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aeddc94ec178ca?w=444&amp;h=65&amp;f=png&amp;s=15197" alt></p><p>取消错误引用后，减小到350k</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aeddcf98c255d2?w=444&amp;h=586&amp;f=png&amp;s=99865" alt></p><h2 id="5-生成入口列表-js-entry"><a href="#5-生成入口列表-js-entry" class="headerlink" title="5.生成入口列表 js entry"></a>5.生成入口列表 js entry</h2><p>目前只有vue文件是webpack 打包的，snowman是多入口 还有很多js文件也要分别打包处理</p><p>遍历src/js 获得webpack 入口列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getEntrys = <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> files = glob.sync(path);</span><br><span class="line">  files.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取js名称</span></span><br><span class="line">    <span class="keyword">const</span> name = item.match(<span class="regexp">/.*\/(.*?).js$/</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">      entry[name] = item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> entry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsEntry = getEntrys(<span class="string">'./src/js/*.js'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="string">'vue-web'</span>: <span class="string">'./src/vue/web.js'</span>,</span><br><span class="line">  <span class="string">'vue-mobile'</span>: <span class="string">'./src/vue/mobile.js'</span>,</span><br><span class="line">  ...jsEntry,</span><br><span class="line">  <span class="string">'im'</span>: <span class="string">'./src/js/im/index.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此webpack打包已经能生成各种js文件，但是还不能运行。所以需要结合到gulp流程</p><h2 id="6-结合到gulp流程"><a href="#6-结合到gulp流程" class="headerlink" title="6.结合到gulp流程"></a>6.结合到gulp流程</h2><p>我们的pug文件热更新需要沿用gulp流程</p><p>webpack output至 gulp dist/js 目录</p><p>生成的文件注意不要加hash， gulp有统一处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'dist/js'</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>增加webpack gulp命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">'webpack'</span>;</span><br><span class="line"><span class="comment">// 载入webpack.config.js文件</span></span><br><span class="line"><span class="keyword">import</span> productConfig <span class="keyword">from</span> <span class="string">'../webpack.prod'</span>;</span><br><span class="line"><span class="keyword">import</span> devConfig <span class="keyword">from</span> <span class="string">'../webpack.dev'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    webpack(isDev ? devConfig : productConfig, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.err(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改gulpfile</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aede106e581a52?w=871&amp;h=752&amp;f=png&amp;s=162133" alt></p><h1 id="二-开发模式热更新"><a href="#二-开发模式热更新" class="headerlink" title="二. 开发模式热更新"></a>二. 开发模式热更新</h1><p>采用 webpack-dev-server</p><p>启动在5001端口</p><p>为了与gulp dev 模式兼容， writeToDist 为true ，同样写到gulp 目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">// devtool: 'inline-source-map',</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist/js'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    writeToDisk: <span class="literal">true</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    port: <span class="number">5001</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: <span class="string">'./src/js/lib'</span>, <span class="attr">to</span>: <span class="string">'./'</span> &#125;])</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>output publicPath 设置为0.0.0.0:5001 , 目的是为了热更新的js代码能被正确找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist/js'</span>),</span><br><span class="line">    publicPath: <span class="string">'http://0.0.0.0:5001/'</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>npm script </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;npm run gulp-dev &amp; npm run webpack-dev-server&quot;,</span><br></pre></td></tr></table></figure><p> 编译界面</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee08ae4f01c2c?w=632&amp;h=228&amp;f=png&amp;s=45807" alt></p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee08e9d707c72?w=578&amp;h=369&amp;f=png&amp;s=64670" alt></p><h1 id="三-vue-拆分多入口-实现按需加载"><a href="#三-vue-拆分多入口-实现按需加载" class="headerlink" title="三. vue 拆分多入口 实现按需加载"></a>三. vue 拆分多入口 实现按需加载</h1><p>目前都在一块，没有分页面分路由拆分   所有vue页面都有全部的vue-web.js</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee09c8897f495?w=1406&amp;h=1304&amp;f=png&amp;s=428098" alt></p><p>原因在于只写了一个vue入口 src/vue/web.js  所有的vue组件都在这里引用，其实应该拆开</p><p>看注释 能看到大概的组件属于哪一页</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0a12558ea9d?w=649&amp;h=1339&amp;f=png&amp;s=409267" alt></p><p>计划先按照主要页面 拆分 </p><ul><li>文章页</li><li>个股页</li><li>已登录首页</li><li>未登录首页</li><li>编辑器页</li></ul><p>抽取通用的vue.common.js 包含一些所有页面都公用的配置和组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> entry = &#123;</span><br><span class="line">  <span class="string">'vue-web'</span>: <span class="string">'./src/vue/web.js'</span>,</span><br><span class="line">  <span class="string">'vue-mobile'</span>: <span class="string">'./src/vue/mobile.js'</span>,</span><br><span class="line">  <span class="string">'vue-article'</span>: <span class="string">'./src/vue/article.js'</span>,</span><br><span class="line">  <span class="string">'vue-stock'</span>: <span class="string">'./src/vue/stock.js'</span>,</span><br><span class="line">  <span class="string">'vue-home'</span>: <span class="string">'./src/vue/home.js'</span>,</span><br><span class="line">  <span class="string">'vue-home-unsign'</span>: <span class="string">'./src/vue/home-unsign.js'</span>,</span><br><span class="line">  <span class="string">'vue-write'</span>: <span class="string">'./src/vue/write.js'</span>,</span><br><span class="line">  ...jsEntry,</span><br><span class="line">  <span class="string">'im'</span>: <span class="string">'./src/js/im/index.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0aa8041d0de?w=547&amp;h=1276&amp;f=png&amp;s=177301" alt></p><p>后续考虑 使用dll将通用的node_modules 打包到一块, 加快打包速度，减少发版后用户端的js更新量。</p><h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0ae96790675?w=586&amp;h=344&amp;f=png&amp;s=72204" alt></p><p>pug文件中引用</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0b17be032c7?w=335&amp;h=81&amp;f=png&amp;s=12561" alt></p><h2 id="个股页"><a href="#个股页" class="headerlink" title="个股页"></a>个股页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0b380a0708e?w=498&amp;h=920&amp;f=png&amp;s=171637" alt></p><p>pug文件中应用</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0b8557a6d5c?w=296&amp;h=106&amp;f=png&amp;s=12802" alt></p><h2 id="已登录首页"><a href="#已登录首页" class="headerlink" title="已登录首页"></a>已登录首页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0bc6769e59a?w=605&amp;h=739&amp;f=png&amp;s=134291" alt></p><h2 id="未登录首页"><a href="#未登录首页" class="headerlink" title="未登录首页"></a>未登录首页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0c0f46fbdf0?w=475&amp;h=598&amp;f=png&amp;s=80224" alt></p><h1 id="四-抽离公共vue-common"><a href="#四-抽离公共vue-common" class="headerlink" title="四. 抽离公共vue-common"></a>四. 抽离公共vue-common</h1><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0c8f98e8208?w=1870&amp;h=942&amp;f=png&amp;s=504587" alt></p><p>每个js有很多重复的部分</p><p>vue 公共资源抽离vue-common</p><p>增加splitChunks</p><blockquote><p><a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/split-chunks-plugin/</a></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0d2782017cc?w=725&amp;h=679&amp;f=png&amp;s=76483" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      <span class="comment">// 只抽取vue开头的公共部分  为了向下兼容 不抽取 vue-web vue-mobile</span></span><br><span class="line">      chunks (chunk) &#123;</span><br><span class="line">        <span class="keyword">return</span> chunk.name.match(<span class="regexp">/^vue-(?!(mobile|web))/</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 取消自动抽取</span></span><br><span class="line">      minSize: <span class="number">3000000</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minSize: <span class="number">0</span>,</span><br><span class="line">          minChunks: <span class="number">4</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          name: <span class="string">'vue-common'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee0d570378598?w=1246&amp;h=1306&amp;f=png&amp;s=321034" alt></p><h1 id="五-js引用方式改为从vue引入"><a href="#五-js引用方式改为从vue引入" class="headerlink" title="五. js引用方式改为从vue引入"></a>五. js引用方式改为从vue引入</h1><p>之前的引用方式</p><ul><li>文章页</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee110d3a8bbb1?w=271&amp;h=43&amp;f=png&amp;s=6859" alt></p><ul><li>个股页</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1139ddcba80?w=215&amp;h=38&amp;f=png&amp;s=5330" alt></p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee114f6c267e4?w=440&amp;h=288&amp;f=png&amp;s=49664" alt></p><p>之前为了按需加载写的代码 可以不用单独在pug入口文件中写了，直接在 vue/article.js  或者 vue/stock.js 中 引用即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee11a7bf8bca7?w=1012&amp;h=835&amp;f=png&amp;s=172108" alt></p><p>改变引用方式后的打包图，可以发现 vue-stock 包含了 snbchart 并且 体积小于 之前stock_new.js的体积</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee11c51e08992?w=1249&amp;h=1306&amp;f=png&amp;s=342816" alt></p><h1 id="六-拆分vue路由"><a href="#六-拆分vue路由" class="headerlink" title="六. 拆分vue路由"></a>六. 拆分vue路由</h1><p>看下面这个打包图，vue-common中包含了所有的路由，并且发现有个bussiness.js 的模块挺大的，后来发现这个模块只有个股页用到了，所以应该打包到vue-stock 这个文件里</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee13904d5f455?w=884&amp;h=946&amp;f=png&amp;s=157739" alt></p><p>分析后发现是vue路由没有拆开的原因</p><p>vue/router/index </p><p>旧代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> routes;</span><br><span class="line"><span class="keyword">const</span> pathname = <span class="built_in">window</span>.location.pathname.replace(<span class="regexp">/^\/snowman/</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">if</span> (~<span class="string">'/'</span>.indexOf(pathname)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.SNOWMAN_LOGIN) &#123;</span><br><span class="line">    routes = <span class="built_in">require</span>(<span class="string">'./home'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\/today/</span>.test(pathname)) &#123;</span><br><span class="line">  routes = <span class="built_in">require</span>(<span class="string">'./home'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\/u\/\d+\/?$/</span>.test(pathname)) &#123;</span><br><span class="line">  routes = <span class="built_in">require</span>(<span class="string">'./profiles'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\/k\/?$/</span>.test(pathname)) &#123;</span><br><span class="line">  routes = <span class="built_in">require</span>(<span class="string">'./search'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\/u\/[A-z0-9_]&#123;4,&#125;\/?$/</span>.test(pathname)) &#123;</span><br><span class="line">  routes = <span class="built_in">require</span>(<span class="string">'./profiles'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\/center\//</span>.test(pathname)) &#123;</span><br><span class="line">  routes = <span class="built_in">require</span>(<span class="string">'./center'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\/[sS]\/([^\/]+)\/detail/</span>.test(pathname)) &#123;</span><br><span class="line">  routes = <span class="built_in">require</span>(<span class="string">'./stock-info'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><p>看这种写法是想拆分路由的 只是因为入口一样 无法拆分</p><p>现在有了不同的入口 就可以拆分了</p><p>改为 </p><p>只有个股页 才引用 stock-info</p><p>匿名首页 只引用 home</p><p>个人页 只引用 profiles</p><p>个人中心 只引用 center</p><p>搜索 只引用 search</p><p>效果如下</p><p>vue-common 252 -&gt; 200</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee18aa063dfbc?w=1248&amp;h=1303&amp;f=png&amp;s=359030" alt></p><p>可以看到 router 从 vue-common 中消失了 </p><p>commponent 大小也减小，拆分到了 需要的js 中  实现按需加载 </p><p>common  中的 business 也正确的只打包在 vue-stock 中 </p><p>匿名首页 拆分 vue 路由后</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee19152b46692?w=614&amp;h=606&amp;f=png&amp;s=117999" alt></p><h1 id="七-lodash按需引用-去除全局lodash"><a href="#七-lodash按需引用-去除全局lodash" class="headerlink" title="七. lodash按需引用 去除全局lodash"></a>七. lodash按需引用 去除全局lodash</h1><p>lodash 多个地方重复引用，并且是全量引用</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1a1dee6ada1?w=1406&amp;h=1304&amp;f=png&amp;s=428098" alt></p><p>增加lodash tree shake</p><blockquote><p><a href="https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/" target="_blank" rel="noopener">https://www.azavea.com/blog/2019/03/07/lessons-on-tree-shaking-lodash/</a></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1ac0526b38b?w=914&amp;h=198&amp;f=png&amp;s=53644" alt></p><p><code>import foo from &#39;lodash/foo&#39;</code></p><p>以这种方式引用才可以tree shake</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1b2c6873e2e?w=583&amp;h=617&amp;f=png&amp;s=106965" alt></p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1b4477dd08b?w=1145&amp;h=1105&amp;f=png&amp;s=285099" alt></p><p>从26k降到了6k</p><h2 id="使用-babel-plugin-import"><a href="#使用-babel-plugin-import" class="headerlink" title="使用 babel-plugin-import"></a>使用 babel-plugin-import</h2><p>但是每次都手动写，不太方便。</p><p>分析原理 <code>import { debounce } from &#39;lodash&#39;</code>这种引用方式不能按需加载的原因为：</p><p>其被babel转换为了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> debounce = lodash.debounce;</span><br></pre></td></tr></table></figure></p><p>第一句 <code>var lodash = require(&#39;lodash&#39;);</code> 就把所有的lodash都引进来了。</p><p>所以我们需要一个插件，能正确的babel转换 </p><p><a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener"><code>babel-plugin-import</code></a> 就是提供了这么一个功能。</p><p>能直接转换为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="built_in">require</span>(<span class="string">'lodash/debounce'</span>);</span><br></pre></td></tr></table></figure><p>所以最后我们采用 <code>babel-plugin-import</code>。并增加了lodash的引用路径配置。</p><p>采用<code>import { debounce } from &#39;lodash&#39;</code>这种写法即可实现按需加载。</p><p>并且引用其他库时，也可以配置按需引用了，比如我们的 <code>snb-lib-jsbridge</code>等。</p><h1 id="八-资源preload"><a href="#八-资源preload" class="headerlink" title="八. 资源preload"></a>八. 资源preload</h1><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1be43b52531?w=2302&amp;h=840&amp;f=png&amp;s=384280" alt></p><p>js资源加载时间很靠后</p><p>增加link preload</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1c379428566?w=399&amp;h=67&amp;f=png&amp;s=8759" alt></p><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1c456192c88?w=1101&amp;h=269&amp;f=png&amp;s=81476" alt></p><h1 id="九-目前资源加载情况"><a href="#九-目前资源加载情况" class="headerlink" title="九. 目前资源加载情况"></a>九. 目前资源加载情况</h1><h2 id="匿名首页"><a href="#匿名首页" class="headerlink" title="匿名首页"></a>匿名首页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1cda7bd72cb?w=822&amp;h=597&amp;f=png&amp;s=145340" alt></p><h2 id="文章页-1"><a href="#文章页-1" class="headerlink" title="文章页"></a>文章页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1d3d3192af7?w=864&amp;h=598&amp;f=png&amp;s=139636" alt></p><h2 id="个股页-1"><a href="#个股页-1" class="headerlink" title="个股页"></a>个股页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1d5a4b310b9?w=803&amp;h=603&amp;f=png&amp;s=149437" alt></p><h2 id="已登录首页-1"><a href="#已登录首页-1" class="headerlink" title="已登录首页"></a>已登录首页</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1d6fef8a465?w=958&amp;h=690&amp;f=png&amp;s=168831" alt></p><h2 id="包分析"><a href="#包分析" class="headerlink" title="包分析"></a>包分析</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/25/16aee1da5d88f986?w=1880&amp;h=947&amp;f=png&amp;s=390644" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;vue 和 js 改为webpack打包 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;升级babel&lt;/li&gt;
&lt;li&gt;引入webpack
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES APM字段检索问题解决</title>
    <link href="https://blog.dappwind.com/2019/05/21/"/>
    <id>https://blog.dappwind.com/2019/05/21/</id>
    <published>2019-05-21T12:58:49.000Z</published>
    <updated>2020-04-06T12:00:08.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://xqimg.imedao.com/16ada7ff81ce42b3fea7e62a.jpg" alt></p><p>使用apm时，处理数据时发现 有的字段没法检索，发现是没有建立mapping的原因，可以看到有个小三角，<br>一般这种情况下， 在 management &gt; index Patterns 中点击刷新就行</p><p><img src="https://xqimg.imedao.com/16ada82f567e32c3fac82e30.jpg" alt></p><p>但是跟预期不同的是，fields数量并没有增加，还是建立不了mapping.</p><p><img src="https://xqimg.imedao.com/16ada7ff83ae4553fcd9cd0c.jpg" alt></p><p>尝试修改mapping文件 发现只有通过api的方式修改，只能全量更新，而且点击refresh field list 后，改动又会变回去。所以放弃这种方法。</p><p>搜索网络 发现一个相似的问题</p><blockquote><p><a href="https://discuss.elastic.co/t/no-cached-mapping-for-this-field-apm/151196" target="_blank" rel="noopener">https://discuss.elastic.co/t/no-cached-mapping-for-this-field-apm/151196</a></p></blockquote><p>I am using APM to monitor my node.js application. In Kibana, I see some fields with the error : “ no cached mapping for this field”. As a result, I cannot run any analytics or visualization on these fields.</p><p>文章中提到的一个方法是设置fields.yml</p><p>fields.yml 在apm-server文档上只出现一次，说是自动生成的</p><blockquote><p><a href="https://github.com/elastic/apm-server#update" target="_blank" rel="noopener">https://github.com/elastic/apm-server#update</a></p></blockquote><p>Update</p><p>Each beat has a template for the mapping in elasticsearch and a documentation for the fields which is automatically generated based on fields.yml. To generate required configuration files and templates run:<br>make index-template update</p><p>查看已经生成的fields.yml</p><p>cd /etc/apm-server  </p><p><img src="https://xqimg.imedao.com/16ada7ff80be4293fc34ba0d.jpg" alt></p><p>可以看到这个配置文件跟kibana中的mapping 很像，修改这个应该可以实现修改mapping的目的</p><p><img src="https://xqimg.imedao.com/16ada80ecace5ec3fe2b8873.jpg" alt></p><p>其中http中 的设置在这里，可以看到dynamic为false  所以也解释了为什么怎么刷新fields都不会增加</p><p><img src="https://xqimg.imedao.com/16ada7ff817e42a3feed8b7c.jpg" alt></p><p>编辑/etc/apm-server 文件夹下的 fields.yml<br>修改相应字段设置 常用的加上 dynamic: true</p><p>然后修改 apm-server.yml 中的template配置</p><blockquote><p><a href="https://github.com/elastic/apm-server/blob/master/apm-server.yml#L180-L214" target="_blank" rel="noopener">https://github.com/elastic/apm-server/blob/master/apm-server.yml#L180-L214</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setup.template.fields: &quot;$&#123;path.config&#125;/fields.yml&quot;</span><br><span class="line">setup.template.overwrite: false</span><br></pre></td></tr></table></figure><p>设置文档</p><blockquote><p><a href="https://www.elastic.co/guide/en/apm/server/master/configuration-template.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/apm/server/master/configuration-template.html</a></p></blockquote><blockquote><p><a href="https://github.com/elastic/beats/issues/8607" target="_blank" rel="noopener">https://github.com/elastic/beats/issues/8607</a></p></blockquote><p>随后重启apm-server </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart apm-server</span><br></pre></td></tr></table></figure><p>进入kibana 查看es的mapping 发现没有更新<br>可以删除当天的index，或者等第二天新建index时<br>然后新的index就发现已经更新了</p><p><img src="https://xqimg.imedao.com/16ada7ff906e4b63f9ece26a.jpg" alt></p><p>可以愉快地检索分析和做图了<br><img src="https://xqimg.imedao.com/16ada7ff90ee5e93fe842855.jpg" alt></p><p>待测试能不能不删除index 直接更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://xqimg.imedao.com/16ada7ff81ce42b3fea7e62a.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;使用apm时，处理数据时发现 有的字段没法检索，发现是没有建立mapping的原因，可以看到有个小三角，&lt;br&gt;一般这种
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch APM Server 配置</title>
    <link href="https://blog.dappwind.com/2019/04/03/"/>
    <id>https://blog.dappwind.com/2019/04/03/</id>
    <published>2019-04-03T10:32:29.000Z</published>
    <updated>2020-04-06T12:00:08.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apm-server-yml-配置文件"><a href="#apm-server-yml-配置文件" class="headerlink" title="apm-server.yml 配置文件"></a>apm-server.yml 配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch.hosts: [ip1,ip2,ip3,ip4]</span><br><span class="line">queue.mem.events: 51200</span><br><span class="line">output.elasticsearch.workers: 4</span><br><span class="line">output.elasticsearch.bulk_max_size: 5120</span><br><span class="line"></span><br><span class="line"># 开启RUM</span><br><span class="line">apm-server.rum.enabled: true</span><br><span class="line">apm-server.rum.allow_origins: [&apos;*&apos;]</span><br><span class="line">apm-server.rum.library_pattern: &quot;node_modules|bower_components|~&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置开启监控api</span><br><span class="line">http.enabled: true</span><br><span class="line">http.port: 5066</span><br><span class="line">http.host: &quot;xx.xx.xx.xx&quot;</span><br><span class="line">#随后访问 xx.xx.xx.xx:5066/stats 即可</span><br></pre></td></tr></table></figure><p>查看配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm-server export config</span><br></pre></td></tr></table></figure><p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/apm-server</span><br></pre></td></tr></table></figure></p><p>查看日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/log/apm-server</span><br></pre></td></tr></table></figure></p><p>验证config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm-server test config</span><br></pre></td></tr></table></figure></p><p>验证output<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm-server test output</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;apm-server-yml-配置文件&quot;&gt;&lt;a href=&quot;#apm-server-yml-配置文件&quot; class=&quot;headerlink&quot; title=&quot;apm-server.yml 配置文件&quot;&gt;&lt;/a&gt;apm-server.yml 配置文件&lt;/h2&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="Elasticsearch APM" scheme="https://blog.dappwind.com/tags/Elasticsearch-APM/"/>
    
  </entry>
  
  <entry>
    <title>常用个人网页部署方式</title>
    <link href="https://blog.dappwind.com/2019/02/20/"/>
    <id>https://blog.dappwind.com/2019/02/20/</id>
    <published>2019-02-20T08:42:36.000Z</published>
    <updated>2020-04-06T12:00:08.744Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="1-静态内容"><a href="#1-静态内容" class="headerlink" title="1.静态内容"></a>1.静态内容</h1><hr><h2 id="github-pages"><a href="#github-pages" class="headerlink" title="github pages"></a>github pages</h2><p>优点</p><ul><li>方便 用的人多</li></ul><p>缺点</p><ul><li>访问慢 不稳定</li><li>无CI,不过外部工具也很多</li></ul><h2 id="gitlab-pages"><a href="#gitlab-pages" class="headerlink" title="gitlab pages"></a>gitlab pages</h2><p>优点</p><ul><li>有CI 可以持续集成</li></ul><p>缺点</p><ul><li>CI编译慢，不稳定</li></ul><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><p>优点</p><ul><li>国内访问快</li></ul><p>缺点</p><ul><li><p>需要在页面上给coding打广告</p></li><li><p>第一次打开会出现广告</p></li></ul><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>优点 </p><ul><li>稳定 快</li></ul><p>缺点</p><ul><li>贵，需要备案</li></ul><h2 id="阿里云和腾讯云的-对象存储"><a href="#阿里云和腾讯云的-对象存储" class="headerlink" title="阿里云和腾讯云的 对象存储"></a>阿里云和腾讯云的 对象存储</h2><p>优点 </p><ul><li>快，基本不要钱，稳定，支持https</li></ul><p>缺点</p><ul><li><p>需要一个备案过的域名</p></li><li><p>无CI，但是有api</p></li></ul><hr><h1 id="2-动态内容"><a href="#2-动态内容" class="headerlink" title="2.动态内容"></a>2.动态内容</h1><hr><h2 id="heroku"><a href="#heroku" class="headerlink" title="heroku"></a>heroku</h2><blockquote><p><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">https://devcenter.heroku.com/</a></p></blockquote><h2 id="ibm-bluemix"><a href="#ibm-bluemix" class="headerlink" title="ibm bluemix"></a>ibm bluemix</h2><blockquote><p><a href="https://www.ibm.com/cloud-computing/bluemix/node/4471" target="_blank" rel="noopener">https://www.ibm.com/cloud-computing/bluemix/node/4471</a></p></blockquote><h2 id="google-app-engine"><a href="#google-app-engine" class="headerlink" title="google app engine"></a>google app engine</h2><blockquote><p><a href="https://console.cloud.google.com/" target="_blank" rel="noopener">https://console.cloud.google.com/</a></p></blockquote><h2 id="阿里腾讯学生机"><a href="#阿里腾讯学生机" class="headerlink" title="阿里腾讯学生机"></a>阿里腾讯学生机</h2><blockquote><p><a href="https://cloud.tencent.com/act/campus" target="_blank" rel="noopener">https://cloud.tencent.com/act/campus</a></p></blockquote><hr><h1 id="3-CI"><a href="#3-CI" class="headerlink" title="3.CI"></a>3.CI</h1><hr><h2 id="codeship-CI介绍"><a href="#codeship-CI介绍" class="headerlink" title="codeship CI介绍"></a>codeship CI介绍</h2><blockquote><p><a href="https://app.codeship.com" target="_blank" rel="noopener">https://app.codeship.com</a></p></blockquote><h2 id="travis-ci"><a href="#travis-ci" class="headerlink" title="travis-ci"></a>travis-ci</h2><blockquote><p><a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">https://docs.travis-ci.com/user/deployment/pages/</a></p></blockquote><h2 id="daocloud-docker-CI"><a href="#daocloud-docker-CI" class="headerlink" title="daocloud docker CI"></a>daocloud docker CI</h2><blockquote><p><a href="https://daocloud.io" target="_blank" rel="noopener">https://daocloud.io</a></p></blockquote><h2 id="docker-hub-CI-介绍"><a href="#docker-hub-CI-介绍" class="headerlink" title="docker hub CI 介绍"></a>docker hub CI 介绍</h2><blockquote><p><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p></blockquote><h1 id="4-私有js-cdn方案"><a href="#4-私有js-cdn方案" class="headerlink" title="4.私有js cdn方案"></a>4.私有js cdn方案</h1><blockquote><p><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">https://www.jsdelivr.com/</a></p></blockquote><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><blockquote><p>所以比较好的方案是 github私有仓库，codeship做CI，js用jsdelivr，阿里云和腾讯云的对象存储来存放网页</p></blockquote><h1 id="实践例子"><a href="#实践例子" class="headerlink" title="实践例子"></a>实践例子</h1><p>hexo 搭建博客<br>theme模板 链接都添加 index.html</p><p>使用 ali-oss 上传到 阿里OSS</p><p>在codeship上配置CI</p><p>以后直接新增 .md 文件即可实现发布</p><p>上传脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"><span class="keyword">const</span> OSS = <span class="built_in">require</span>(<span class="string">'ali-oss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promisifyReaddir = util.promisify(fs.readdir)</span><br><span class="line"><span class="keyword">const</span> promisifyStat = util.promisify(fs.stat)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阿里 OSS access key 拥有对 OSS 的全部权限</span></span><br><span class="line"><span class="keyword">const</span> ALIOSSKEY = &#123;</span><br><span class="line">  key: <span class="string">'......'</span>,</span><br><span class="line">  secret: <span class="string">'.......'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> OSS(&#123;</span><br><span class="line">  <span class="comment">// 请填写你的 Bucket 对应的 region</span></span><br><span class="line">  region: <span class="string">'oss-cn-beijing'</span>,</span><br><span class="line">  accessKeyId: ALIOSSKEY.key,</span><br><span class="line">  accessKeySecret: ALIOSSKEY.secret,</span><br><span class="line">  <span class="comment">// 请填写对应的 Bucket 名字</span></span><br><span class="line">  bucket: <span class="string">'...'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicPath = path.resolve(__dirname, <span class="string">'./blog'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">proPath = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dir = <span class="keyword">await</span> promisifyReaddir(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span><span class="subst">$&#123;proPath&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dir.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> stat = <span class="keyword">await</span> promisifyStat(path.resolve(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span><span class="subst">$&#123;proPath&#125;</span>`</span>, dir[i]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stat.isFile()) &#123;</span><br><span class="line">      <span class="keyword">const</span> fileStream = fs.createReadStream(path.resolve(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span><span class="subst">$&#123;proPath&#125;</span>`</span>, dir[i]))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`上传文件: <span class="subst">$&#123;proPath&#125;</span>/<span class="subst">$&#123;dir[i]&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> client.putStream(<span class="string">`<span class="subst">$&#123;proPath&#125;</span>/<span class="subst">$&#123;dir[i]&#125;</span>`</span>, fileStream)</span><br><span class="line">      <span class="comment">// console.log(result)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">      <span class="keyword">await</span> run(<span class="string">`<span class="subst">$&#123;proPath&#125;</span>/<span class="subst">$&#123;dir[i]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure><h2 id="codeship-配置命令"><a href="#codeship-配置命令" class="headerlink" title="codeship 配置命令"></a>codeship 配置命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">npm run upload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;1-静态内容&quot;&gt;&lt;a href=&quot;#1-静态内容&quot; class=&quot;headerlink&quot; title=&quot;1.静态内容&quot;&gt;&lt;/a&gt;1.静态内容&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;github-pages&quot;&gt;&lt;a href=&quot;#github-pages&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>可视化活动页配置平台</title>
    <link href="https://blog.dappwind.com/2018/12/28/"/>
    <id>https://blog.dappwind.com/2018/12/28/</id>
    <published>2018-12-28T06:29:51.000Z</published>
    <updated>2020-04-06T12:00:08.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可视化活动页配置平台"><a href="#可视化活动页配置平台" class="headerlink" title="可视化活动页配置平台"></a>可视化活动页配置平台</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为活动页的特点，就是要求快速上线，经常修改。我们回想下发布活动页时的情况：</p><p>运营会想:</p><ul><li>我要发布个运营页面，为什么还要看前端的排期？为啥不能自己配置，我要自己改代码。</li><li>我要改个文案，前端怎么两个多小时了还没改好，是不是能力有问题？而且改多了还发急，态度不好。</li></ul><p>前端也会吐槽：</p><ul><li>一个活动页，来回改，改了一遍又一遍，提了十几个PR全是文案修改，项目都部署了好几次。</li></ul><p>造成这一现象的原因就是，现有活动页，页面信息都是前端直接写在项目里，靠发版来修改。或者后端调用数据库，页面变量定义不灵活。而运营活动页会经常修改，有很多重复劳动。</p><p>所以就有当前活动页发布时的痛点：</p><h4 id="1-修改需要改代码"><a href="#1-修改需要改代码" class="headerlink" title="1.修改需要改代码"></a>1.修改需要改代码</h4><p>改动由前端编写代码完成，运营想改不方便。比如嘉年华的宣传页上的嘉宾及演讲内容，每次都要改很多次，浪费很多时间。</p><h4 id="2-结构类似，重复劳动"><a href="#2-结构类似，重复劳动" class="headerlink" title="2.结构类似，重复劳动"></a>2.结构类似，重复劳动</h4><p>专题页，页面相似，前端往往机械劳动。比如之前的保险专题页，页面结构相似，如果每次都重新开发，没有技术含量。</p><h4 id="3-不能实时预览"><a href="#3-不能实时预览" class="headerlink" title="3.不能实时预览"></a>3.不能实时预览</h4><p>客户想预览 必须发版，周期很长。<br>比如有的活动页需要客户审核，就要每次都发线上，客户让修改后要再发版，时效性不好。（比如给丹书铁券大V定制的铁券一号基金宣传页，基金经理看了后，感觉有个文案写错了，或者头像不好看 要换头像）现在都要靠发一次线上来解决。</p><p>所以准备搭建一个 运营活动页配置后台，前期可以通过该后台修改活动页面文案、图片等。后期可直接通过该平台生成并发布活动页。</p><p>目前已在 2019雪球中概活动页 和 中概投票页中使用，帮助采坑，发现了一些bug，后来都修复了。</p><p>做了两个动图，先展示下能实现的功能</p><ul><li>修改专题页</li></ul><p><img src="https://xqimg.imedao.com/167f41b2b80113fd7b7aaca3.gif" alt></p><ul><li>修改嘉年华活动页</li></ul><p><img src="https://xqimg.imedao.com/167f4244597133fdec5e4903.gif" alt></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h4 id="1-页面结构类似的情况"><a href="#1-页面结构类似的情况" class="headerlink" title="1.页面结构类似的情况"></a>1.页面结构类似的情况</h4><p>比如 活动页、专题页、基金宣传页<br>可以抽离出通用模板，以后再配置活动页，只需在后台新增json就可以实现发布页面</p><h4 id="2-页面数据比较多的情况"><a href="#2-页面数据比较多的情况" class="headerlink" title="2.页面数据比较多的情况"></a>2.页面数据比较多的情况</h4><p>比如 嘉年华宣传页 嘉宾列表、会议时间表等 都很多，可以把数据由前端写死改为json实时数据库，json灵活定义。</p><blockquote><p>使用介绍请直接跳至后面的 <code>编辑后台</code> </p></blockquote><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p><img src="https://xqimg.imedao.com/16a637ba1713a99a3fe1881b.jpg" alt><br>包括3个部分，有一个编辑的后台, 数据存储的数据库和页面渲染的前端项目</p><p>图中间的箭头 传递的是活动页面信息，采用的是json格式的数据。一条json数据就包含了 模板中的全部变量，通过这个数据就可以渲染出一个活动页。</p><p>而要实现这个，就要提取页面模板。所以先说下框架图中的<code>抽取模板</code>部分</p><h2 id="抽取模板"><a href="#抽取模板" class="headerlink" title="抽取模板"></a>抽取模板</h2><p><img src="https://xqimg.imedao.com/16a637c3ad13a5ba3fc46104.jpg" alt></p><p>图上是之前设计师设计的雪球保险活动页，这是4个活动页拼到一起了，每一竖排是一个活动页。因为当时就跟设计师约定好了准备采取了模板的方式，所以活动页结构类似，新配置一个活动页就很方便，一条json数据可以生成一个页面。这是如何实现的呢？</p><h4 id="抽取骨架"><a href="#抽取骨架" class="headerlink" title="抽取骨架"></a>抽取骨架</h4><p><img src="https://xqimg.imedao.com/16a637cf5a53a4033fe5ee65.jpg" alt></p><p>我们可以看到，这4个页面结构类似，我们抽取4个页面相同的骨架图，这个骨架图就是模板，包含了所有不变的内容，而那些会变得内容，我们存在json里。右边这个代码就是json, json是采取  名称：内容 的键值对的数据格式，内容和名称一一对应，每一行都是一个对应关系。</p><h4 id="骨架分配变量名"><a href="#骨架分配变量名" class="headerlink" title="骨架分配变量名"></a>骨架分配变量名</h4><p><img src="https://xqimg.imedao.com/16a637de4e33a5df3fb9ecf0.jpg" alt></p><p>随后，我们要给骨架图中对应的变量分配变量名，就是找到和json数据中的对应关系。</p><p>上面是个头图我们取名为 banner_img 随后是几组保险列表，每一组叫一个section<br>最后是一个底部图 footer_img</p><p>我们能看到在最右侧的json中 能看到这3部分，banner_img 和 footer_img后面的值都是一个网址 以png结尾， 这是个cdn图片资源地址，至于如何生成这个url, 开发了专门的小工具，后面会讲到。</p><p>sections 部分 是个数组，里面有3个，就相当于个子模块</p><h4 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h4><p><img src="https://xqimg.imedao.com/16a637e396b3a4183fd22eb5.jpg" alt></p><p>右边这个图是抽出其中一个来讲</p><p>这个部分包括一个 小标题 和3个保险卡片</p><p>标题取名为title 对应的是个url资源地址</p><p>卡片部分叫 items</p><p>每个卡片 包括一个图片 标题 价格 按钮等，对应的值在右侧json 绿框中可以看到。</p><h4 id="页面样式-amp-信息"><a href="#页面样式-amp-信息" class="headerlink" title="页面样式&amp;信息"></a>页面样式&amp;信息</h4><p><img src="https://xqimg.imedao.com/16a637eb9143a9d83fe42c44.jpg" alt></p><p>其他的还有些页面样式和信息<br>比如页面背景颜色，卡片背景颜色，文字颜色，微信分享信息，微信分享图等。</p><p>至此一个活动页的json 就定义完了，遇到相似的活动页，我们只要修改下json里面的数据就可以了。</p><h4 id="峰会活动页"><a href="#峰会活动页" class="headerlink" title="峰会活动页"></a>峰会活动页</h4><p><img src="https://xqimg.imedao.com/16a637f232d3a9e33fea3390.jpg" alt></p><p>下面 是另一个应用场景，线下活动页，比如每年的嘉年华，和各种峰会。这些活动页页面信息特别多，而且变动频繁，经常一个活动下来 要改动十几版。使用配置工具，应该会方便很多。</p><p>图中两个活动页 分别是去年的嘉年华和即将举办的中概峰会页面，页面结构大概相似，也可以分为几大块</p><p>然后页面信息有修改的话，只需修改这个json即可。应该是比之前方便了些，因为之前上线一个活动能收到好多修改文案的代码合并请求，现在很少看到了。</p><blockquote><p>总结来说，这个json的提取，即模板的提取，需要我们的设计师们的支持，在设计活动页时，可以按照某个约定好的模板出设计资源，运营同事拿到页面资源后就可以自行配置活动页了。</p></blockquote><h2 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h2><p><img src="https://xqimg.imedao.com/16a637f806039ef13fec34de.jpg" alt><br>接下来简单说下<br>是怎么从json数据生成出一个活动页的<br>采用nodejs 和 nuxt.js<br>nuxt.js 采用vue语法，实现服务端渲染，node服务器直接输出渲染好的活动页，有对搜索引擎友好，加载速度快等优点，然后vue这个框架用起来比较简单，适合做简单交互的活动页，很省事。</p><p><img src="https://xqimg.imedao.com/16a637feeb53a9ed3fd3fa7f.jpg" alt></p><p>左图展示了<br>页面服务端渲染流程，提供了asyncData() 这个函数，用于服务端获取数据，所以，如右侧所示，在这个函数里获取页面数据接口，这个接口也是node写的，通过读取数据库把相应的json数据传过来，有30s的缓存。</p><p>下方是模板渲染代码，可以看到 里面有我们之前定义的变量，页面渲染时，会把json变量里的内容放在页面的相应位置上。实现通过json 渲染一个页面</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p><img src="https://xqimg.imedao.com/16a63804d563a4403feee10e.jpg" alt></p><p>页面文案和配置信息采用json格式，前端开发人员可灵活定义。<code>文案、css样式、图片链接</code>都可以自由定义。数据存储采用 json格式转string格式存数据库，有两份。 一份线上 采用统用数据库，一份配置后台预览用，采用firebase实时数据库。</p><ul><li><p>线上数据</p><p>key 由链接拼接 比如 baoxian/child  =&gt; baoxian-child<br>value 为json 转string存储<br>提供接口可查询 由key查value</p></li><li><p>预览数据</p><blockquote><p>firebase 一款方便的实时数据库，已被谷歌收购 <a href="https://firebase.google.com/" target="_blank" rel="noopener">https://firebase.google.com/</a></p></blockquote><blockquote><p>wilddog firebase国内模仿版 <a href="https://www.wilddog.com/" target="_blank" rel="noopener">https://www.wilddog.com/</a></p></blockquote></li></ul><p>线上服务的采用mysql ，因为我们的页面结构用的是json 所以转成string存到数据库里，约定页面链接为两级，key由页面链接拼接而成。由node提供接口，能简单通过key 查 value</p><p>另一部分是实时数据库部分</p><p>因为想实现实时的页面预览，所以采用google的firebase实时数据库，能实现实时存储和同步实时json数据。能够实现 我们在后台编辑，页面能实时看到变动的效果。</p><p>我们约定，进入实时调试模式，只需在链接后添加 ?snowfire=true<br><img src="https://xqimg.imedao.com/16a6380b7f63aa0f3fef4aca.jpg" alt><br>这也是通过代码来实现的，<br>mounted 函数是在客户端渲染时触发，如果发现url中有snowfire参数为true,<br>就读取firebase数据，覆盖之前的数据，并开启监听，json数据一旦有变化，就能实现页面无刷新更新。无刷新更新这个是由vue引擎的双向绑定实现的。</p><h2 id="编辑后台及使用说明"><a href="#编辑后台及使用说明" class="headerlink" title="编辑后台及使用说明"></a>编辑后台及使用说明</h2><p><img src="https://xqimg.imedao.com/16a63812d803aa343f99d3d6.jpg" alt><br>后台是基于我们的雪球CRM通用框架开发的，目前已在多个项目中使用，蛋卷新的CRM，mpaas,和大数据的配置后台，以及正在开发的行情CRM。ui 和组件库 是阿里的antd，开发起来比较方便。</p><p><img src="https://xqimg.imedao.com/16a6381abaa3a48a3fe30626.jpg" alt></p><p>如果要对文案进项修改，先在左上方的输入框中选择要修改的数据，是个二级菜单，选择完后，右边会出现 这个页面的线上页面地址和 预览地址， 区别就是我们约定的参数不同，预览地址后面加了 ？snowfire=true 。 直接点击这两个链接会新窗口打开页面。一般我们点击预览页面的链接来进行修改。</p><p>下方是对应的json 数据 我们可以进行修改，里面的css变量 还可以看到颜色选择器</p><p>点击小三角可以 展开 子模块，绿色的部分是文案 直接点击修改就行。</p><p>右上方有 <code>发布预览</code> 和 <code>发布线上</code> 两个按钮。</p><p><code>发布预览</code> 就是相当于保存，是发布到实时数据库。一般有修改后，直接点击<code>发布预览</code>即可。预览页面就可以看到变动了。</p><p><code>发布线上</code> 是发布到线上数据，当预览页面修改没问题时，就可以发布线上了。</p><p>当修改数据出现问题时，只要不点<code>发布预览</code>, 直接刷新就可以恢复之前的数据。</p><p>如果不慎点了<code>发布预览</code>，想要还原的话，把鼠标移到<code>恢复</code>按钮处，会出现两个选项<br><img src="https://xqimg.imedao.com/169b4c7ece024453fe1aee31.jpg" alt></p><ul><li><p><code>恢复上次预览数据</code> 会将数据恢复到 上一次发布时。</p></li><li><p><code>从线上数据恢复</code> 会从线上获取数据，更新到预览数据中。</p></li></ul><p>如果想要新增 复制 和删除的话， 点击前边的小方块，里面有选项。<br><img src="https://xqimg.imedao.com/16a63824ed139f533feea08a.jpg" alt></p><p>如果遇到想修改排序的话，<br>拖动最前面的 6个小点，可以直接拖动排序，如图所示。<br><img src="https://xqimg.imedao.com/169a4a5ffcd433fe812118d8.gif" alt></p><p>之前提到，json里的图片资源都是链接的形式，如果想换个图片怎么获得新图片的链接呢？<br>之前的方法是在雪球里面发个帖子，然后把帖子里面的图片地址复制出来，很不方便。</p><p>所以开发了个图片上传的小工具，在运营助手下面， 有个图片上传的选项，点击后会新开一个窗口，可以把图片批量拖动到方框里 或者点击方框 选择图片上传。然后下方会出现图片的预览图和对应的cdn地址，我们可以直接复制这个地址，粘贴到编辑器的相应位置。<br><img src="https://xqimg.imedao.com/169a4a6a5884e9843fd4ca08.gif" alt></p><h2 id="新建流程"><a href="#新建流程" class="headerlink" title="新建流程"></a>新建流程</h2><h4 id="1-已有模板时"><a href="#1-已有模板时" class="headerlink" title="1.已有模板时"></a>1.已有模板时</h4><p>新增页面示例<br><img src="https://xqimg.imedao.com/167f42c3e1c153fd65babf24.gif" alt></p><p>比如新建一个中年人保险活动页，前端已经搭建了模板，设计按照约定的页面结构提供素材，开发人员或者运营人员打开后台，点击右上角，切换成开发者模式，在baoxian栏下 复制一个json信息，比如复制child的json</p><p><img src="https://xqimg.imedao.com/16a6382d7c039f5b3fd3c42f.jpg" alt></p><p>将名字改为 adult, 点击预览，随后切换回普通模式，选择新建的数据进行修改。</p><p>这时页面已经建立，可以数据选择框右面看到相应网址。用浏览器打开新建的链接，当然内容还是child的内容。</p><p>这时就可以替换内容了，建议关闭实时预览节省流量。</p><p>替换完，预览没问题就可以发给审核人员或者客户看下，有问题也可以直接后台修改。</p><p>确认没问题后，点击发布，即可更新线上数据库内容。<br>至此一个活动页就搭建完成了。</p><h4 id="2-没有模板时"><a href="#2-没有模板时" class="headerlink" title="2.没有模板时"></a>2.没有模板时</h4><p>大部分情况下，已有模板不能满足设计要求。前端人员需要先开发出页面，抽离出变量，变量的精细程度看具体页面要求。可以全部配置成变量，也可以选择那些容易变动的或者不确定的内容替换。</p><p>开发时可以先不调接口和firebase,直接在data中写JsonData这个变量，内部名字尽量取通俗易懂的。当整体开发完成后，切换为开发者模式，将JsonData复制到后台实时数据库中，切换为 code 模式，将json粘贴上去，格式化。由于插件问题，我们需要再次切换为 tree模式，在tree模式下随便改动一下 才会生效。然后点击预览，数据就同步到实时数据库了。</p><p><img src="https://xqimg.imedao.com/16a6383c23f3a6843fedfdb3.jpg" alt></p><p>这时将页面数据切换为实时数据库数据</p><p>部署前端项目，就可以交由运营配置页面信息了。流程如1。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;可视化活动页配置平台&quot;&gt;&lt;a href=&quot;#可视化活动页配置平台&quot; class=&quot;headerlink&quot; title=&quot;可视化活动页配置平台&quot;&gt;&lt;/a&gt;可视化活动页配置平台&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cli</title>
    <link href="https://blog.dappwind.com/2018/11/07/"/>
    <id>https://blog.dappwind.com/2018/11/07/</id>
    <published>2018-11-07T03:13:25.000Z</published>
    <updated>2020-04-06T12:00:08.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs-编写简单-cli"><a href="#nodejs-编写简单-cli" class="headerlink" title="nodejs 编写简单 cli"></a>nodejs 编写简单 cli</h1><p><img src="https://ws1.sinaimg.cn/large/6b201a41ly1fwzeg9nwsuj20c307y3zc.jpg" alt></p><p>Command Line Interface，顾名思义是一种通过命令行来交互的工具或者说应用。SPA应用中常用的如vue-cli, angular-cli, node.js开发搭建express-generator，还有我们最常用的webpack，npm等。他们是web开发者的辅助工具，旨在减少低级重复劳动，专注业务提高开发效率，规范develop workflow。</p><p>CLI的根据不同业务场景有不同的功能，但万变不离其宗，本质都是通过命令行交互的方式在本地电脑运行代码，执行一些任务。</p><p>CLI有什么好处？</p><p>我们可以从工作中总结繁杂、有规律可循、或者简单重复劳动的工作用CLI来完成，只需一些命令，快速完成简单基础劳动。以下是我对现有工作中的可以用CLI工具实现的总结举例：</p><ul><li>快速生成应用模板，如vue-cli等根据与开发者的一些交互式问答生成应用框架</li><li>创建module模板文件，如angular-cli，创建component,module；sequelize-cli 创建与mysql表映射的model等</li><li>服务启动，如ng serve</li><li>eslint，代码校验，如vue,angular，基本都具备此功能</li><li>自动化测试 如vue,angular，基本都具备此功能</li><li>编译build，如vue,angular，基本都具备此功能</li><li>*编译分析，利用webpack插件进行分析</li><li>*git操作</li><li>*生成的代码上传CDN</li><li>*还可以是小工具用途的功能，如http请求api、图片压缩、生成雪碧图等等，只要你想做的都能做<br>总体而言就是一些快捷的操作替代人工重复劳动，提升开发效率。</li></ul><p>与npm scripts的对比</p><p>npm scripts也可以实现开发工作流，通过在package.json 中的scripts对象上配置相关npm 命令，执行相关js来达到相同的目的；</p><p>但是cli工具与npm scripts相比有什么优势呢?</p><p>npm scripts是某个具体项目的，只能在该项目内使用，cli可以是全局安装的，多个项目使用；<br>使用npm scripts 在业务工程里面嵌入工作流，耦合太高；使用cli 可以让业务代码工作流相关代码剥离，业务代码专注业务<br>cli工具可以不断迭代开发，演进，沉淀。</p><p>下面就是nodejs 实现一个简单cli</p><p><img src="https://ws1.sinaimg.cn/large/6b201a41ly1fwzchofm4rg20eq05mglq.gif" alt></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>nodejs的cli，本质就是跑node脚本，大家都会：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello xueqiu'</span>)</span><br></pre></td></tr></table></figure></p><p>然后命令行调用</p><blockquote><p>node index.js</p></blockquote><h2 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h2><blockquote><p>hello world</p></blockquote><p>可以做得更逼真一点，我们在package.json里面的scripts字段上添加一下脚本名：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>:&#123;</span><br><span class="line">        <span class="attr">"hello"</span>:<span class="string">"node index.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后命令行调用：</p><blockquote><p>npm run hello</p></blockquote><p>接下来就说说，如何给这个node脚本起个名字。</p><h2 id="起名字"><a href="#起名字" class="headerlink" title="起名字"></a>起名字</h2><p>姑且，先把这个cli的名字命名为dw-cli，就是我们能够在命令行里面，输入dw-cli，然后它就打印一句hello xueqiu，没有node也没有npm，就是：</p><p>这里，我们需要做几步操作：</p><p>index.js文件顶部声明执行环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello xueqiu'</span>)</span><br></pre></td></tr></table></figure><p>添加 <code>#!/usr/bin/env node</code> 或者 <code>#!/usr/bin/node</code> ，这是告诉系统，下面这个脚本，使用nodejs来执行。当然，这个系统不包括windows，因为windows下有个JScript的历史遗留物在，会让你的脚本跑不起来。</p><blockquote><p>#!/usr/bin/env node的意思是让系统自己去找node的执行程序。</p></blockquote><blockquote><p>#!/usr/bin/node的意思是，明确告诉系统，node的执行程序在路径为/usr/bin/node。</p></blockquote><p>添加package.json的bin字段。</p><p>可以在index.js当前的目录下执行npm init创建一个package.json，然后在package.json里面，添加一个bin字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">"name"</span>: <span class="string">"cli-test"</span>,</span><br><span class="line">     <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">     <span class="attr">"bin"</span>:&#123;</span><br><span class="line">         <span class="attr">"dw-cli"</span>:<span class="string">"index.js"</span>  </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bin字段里面写上这个命令行的名字，也就是dw-cli，它告诉npm，里面的js脚本可以通过命令行的方式执行，以dw-cli的命令调用。当然命令行的名字想写什么都可以：</p><p>在当前package.json目录下，打开命令行工具，执行npm link，将当前的代码在npm全局目录下留个快捷方式。<br>npm检测到package.json里面存在一个bin字段，它就同时在全局npm包目录下生成了一个可执行文件：</p><blockquote><p>npm root -g 这个命令可以看到npm的全局位置</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/6b201a41ly1fwzcpxojqyj20cb07qmxv.jpg" alt></p><p>当我们在系统命令行直接执行dw-cli的时候，实际上就是执行这里的脚本。</p><p>因为安装node的时候，npm将这个目录配置为系统变量环境了，当你执行命令的时候，系统会先找系统命令和系统变量，然后到变量环境里面去查找这个命令名，然后找到这个目录后，发现匹配上了该命令名的可执行文件，接着就直接执行它。vue-cli也好，webpack-cli也好，都是这样执行的。</p><p>这样，你的第一个cli脚本就成功安装了，可以在命令行里面，直接敲你的cli名字，看看结果输出吧。</p><p><img src="https://ws1.sinaimg.cn/large/6b201a41ly1fwzdmz6ugzg20eq05mdfp.gif" alt></p><p>另外，如果你仅希望你的cli脚本仅在项目里执行，则需要在你项目里面新建一个目录，重复上述的操作，只是在第三步的时候，不要llink到全局里面去，而是使用npm i -D file:&lt;你的脚本cli目录路径&gt;，把它当成项目的依赖安装到node_modules里面去，如果安装成功，那么在项目的package.json你会看到多了一条依赖，这条依赖的值不是版本号，而是你脚本的路径。然后在node_modules里面会有一个.bin目录，里面就存放着你的可执行文件。</p><h2 id="参数读取-process-argv"><a href="#参数读取-process-argv" class="headerlink" title="参数读取:process.argv"></a>参数读取:process.argv</h2><p>名字有了，输出也有了，看看我们跟那些大名鼎鼎的cli工具，在形式上还差点啥？对了，人家可以支持不同参数选项的，还可以根据输入的不同，产生不同的结果。<br>这样吧，我们给这个cli加一个功能，既然叫dw-cli，那不能只会hello world吧，必须要见谁就说hello才行：</p><blockquote><p>dw-cli older</p></blockquote><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote><p>hello older</p></blockquote><p>虽然这个功能很简单，但是至少也是实现了“根据输入的不同，产生不同结果”的效果。</p><p>命令行上的参数，可以通过process这个变量获取，process是一个全局对象而不是一个包，不需要通过require引入。通过process这个对象我们可以拿到当前脚本执行环境等一系列信息，其中就包括命令行的输入情况，这个信息，保存在process.argv这个属性里。我们可以打印一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.argv);</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/6b201a41ly1fwzdogmycmg20eq05mwef.gif" alt></p><p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello  [ &apos;/usr/local/bin/node&apos;, &apos;/usr/local/bin/dw-cli&apos;, &apos;xq&apos;]</span><br></pre></td></tr></table></figure></p><p>可以看出，argv是个数组，前两位是固定的，分别是node程序的路径和脚本存放的位置，从第三位开始才是额外输入的内容。那么实现上面的功能就很简单了，只要读取argv数组的第三位，然后输出出来就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">console.log(`hello $&#123;process.argv[2]||&apos;world&apos;&#125;`)</span><br></pre></td></tr></table></figure><p>npm社区中也有一些优秀的命令行参数解析包，比如commander.js等等</p><blockquote><p><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">https://www.npmjs.com/package/commander</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create &lt;type&gt; [name] [otherParams...]'</span>)</span><br><span class="line">  .alias(<span class="string">'c'</span>)</span><br><span class="line">  .description(<span class="string">'Generates new code'</span>)</span><br><span class="line">  .action(<span class="function"><span class="keyword">function</span> (<span class="params">type, name, otherParams</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'type'</span>, type);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name'</span>, name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'other'</span>, otherParams);</span><br><span class="line">    <span class="comment">// 在这里执行具体的操作</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure><p>如果你想使用比较复杂的参数或者命令，建议还是用第三方包比较好，手写解析太耗精力了。</p><h2 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h2><p>现在，你可以自由自在的写你自己的cli脚本了。<br>如果想使用phantom你需要通过node的child_process模块开启子进程，在子进程内调用命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line">exec(command, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>包括系统命令、其他cli命令都可以在这里执行。特别是系统命令。社区上也有一些不错的包，比如shelljs</p><h2 id="美化输出"><a href="#美化输出" class="headerlink" title="美化输出"></a>美化输出</h2><p>希望更人性化一点，比如提供一些友好的输入、提示啊，给你的输出加点颜色区分重点啊，写个简单的进度条啊等等，那么就需要美化一下你的输出了。</p><p>除了颜色这部分，不使用第三方包实现起来非常繁琐复杂，其他的功能，都可以试试自己写。<br>颜色部分使用第三方包colors。</p><p>其他都是由nodejs自带的readline模块实现的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello xq'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello '</span>, process.argv)</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>)</span><br><span class="line"><span class="keyword">const</span> unloadChar = <span class="string">'-'</span></span><br><span class="line"><span class="keyword">const</span> loadedChar = <span class="string">'='</span></span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">rl.question(<span class="string">'什么命令？ '</span>, answer =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> time = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      clearInterval(time)</span><br><span class="line">      readline.cursorTo(process.stdout, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">      <span class="comment">// readline.clearScreenDown(process.stdout)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;answer&#125;</span>`</span>)</span><br><span class="line">      process.exit(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    readline.cursorTo(process.stdout, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    readline.clearScreenDown(process.stdout)</span><br><span class="line">    renderProgress(<span class="string">'saying hello'</span>, i)</span><br><span class="line">    i++</span><br><span class="line">  &#125;, <span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderProgress</span>(<span class="params">text, step</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> PERCENT = <span class="built_in">Math</span>.round(step * <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">const</span> COUNT = <span class="number">2</span></span><br><span class="line">  <span class="keyword">const</span> unloadStr = <span class="keyword">new</span> <span class="built_in">Array</span>(COUNT * (<span class="number">10</span> - step)).fill(unloadChar).join(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> loadedStr = <span class="keyword">new</span> <span class="built_in">Array</span>(COUNT * step).fill(loadedChar).join(<span class="string">''</span>)</span><br><span class="line">  process.stdout.write(<span class="string">`<span class="subst">$&#123;text&#125;</span>:【<span class="subst">$&#123;loadedStr&#125;</span><span class="subst">$&#123;unloadStr&#125;</span>|<span class="subst">$&#123;PERCENT&#125;</span>%】`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/6b201a41ly1fwzchofm4rg20eq05mglq.gif" alt></p><p>首先，通过readline.createInterface方法创建一个interface类，这个类下面有一个方法.question，用这个方法在命令行上抛出一个问题，在第二个参数传入一个函数进行监听。一旦用户输入完毕敲下回车，就会触发回调函数。<br>然后我们在回调函数里面写了个计时器，假装我们在处理某些事务。<br>使用readline.cursorTo这个方法，可以改变命令行上的光标的位置。</p><blockquote><p>readline.cursorTo(process.stdout, 0, 0);是移动到第1列第1行上</p></blockquote><blockquote><p>readline.cursorTo(process.stdout, 0, 1);是移动到第1列第2行上</p></blockquote><p>使用readline.clearScreenDown这个方法，是让命令行从当前行开始，到最后一行结束，将这两行之间所有内容清除。<br>renderProgress是自己封装的一个方法，通过process.stdout.write方法输出一行看起来像是进度条的字符串到命令行上。<br>所以在计时器里面，当计数小于10的时候，我们让光标移到第一行上，然后清除所有输出，输出进度条字符串；当计数大于10的时候，我们关掉计时器，清除输出，打印结果。<br>最后不要忘记关掉进程，可以使用interface这个类的.close方法关掉readline进程，也可以直接调用process.exit退出。</p><p>绘制的思路跟canvas绘制动画一样，只不过canvas是清除画布，而命令行这里是通过readline.clearScreenDown清除输出。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>实现功能为：</p><ul><li>输入 new 命令从github下载一个脚手架模版，然后创建对应的app。</li><li>输入 create 命令可以快速的创建一些样板文件。</li></ul><blockquote><p><a href="https://juejin.im/post/5a90dd62f265da4e9a4973aa" target="_blank" rel="noopener">https://juejin.im/post/5a90dd62f265da4e9a4973aa</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nodejs-编写简单-cli&quot;&gt;&lt;a href=&quot;#nodejs-编写简单-cli&quot; class=&quot;headerlink&quot; title=&quot;nodejs 编写简单 cli&quot;&gt;&lt;/a&gt;nodejs 编写简单 cli&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue简易实现</title>
    <link href="https://blog.dappwind.com/2018/09/12/"/>
    <id>https://blog.dappwind.com/2018/09/12/</id>
    <published>2018-09-12T04:55:14.000Z</published>
    <updated>2020-04-06T12:00:08.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易vue框架实现"><a href="#简易vue框架实现" class="headerlink" title="简易vue框架实现"></a>简易vue框架实现</h1><p>找到了个简单代码实现了vue的少许基本功能的例子，有助于了解vue源码，加深对框架的理解。遇到问题也可以从原理方面分析。</p><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"clickMe"</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Mvvm(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        title: <span class="string">'mvvm title'</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'mvvm name'</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="javascript">        clickMe: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.title = <span class="string">'mvvm code click'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.title = <span class="string">'timeout 1000'</span></span></span><br><span class="line"><span class="undefined">        &#125;, 1000)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p><img src="https:////xqimg.imedao.com/165cc209b2111e273fd68945.png" alt></p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mvvm</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 数据和方法</span></span><br><span class="line">  <span class="keyword">this</span>.data = options.data</span><br><span class="line">  <span class="keyword">this</span>.methods = options.methods</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将data 代理到 this</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.data).forEach(<span class="function"><span class="params">key</span> =&gt;</span></span><br><span class="line">    self.proxyKeys(key)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 观察&amp;数据劫持</span></span><br><span class="line">  observe(<span class="keyword">this</span>.data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模板编译</span></span><br><span class="line">  <span class="keyword">new</span> Compile(options.el, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 所有事情处理好后执行 mounted 函数</span></span><br><span class="line">  options.mounted.call(<span class="keyword">this</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mvvm.prototype = &#123;</span><br><span class="line">  proxyKeys: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 这里的 get 和 set 实现了 vm.data.name 和 vm.name 的值同步</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">      <span class="keyword">get</span>: function () &#123; </span><br><span class="line">        <span class="keyword">return</span> self.data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">        self.data[key] = newValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译函数-compile"><a href="#编译函数-compile" class="headerlink" title="编译函数 compile"></a>编译函数 compile</h2><p>将html中的vue指令解析编译 实现绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.vm = vm</span><br><span class="line">  <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">  <span class="keyword">this</span>.fragment = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.el) &#123;</span><br><span class="line">      <span class="comment">// 因为遍历解析的过程有多次操作 dom 节点，为提高性能和效率，会先将跟节点 el 转换成文档碎片 fragment 进行解析编译操作，解析完成，再将 fragment 添加回原来的真实 dom 节点中</span></span><br><span class="line">      <span class="keyword">this</span>.fragment = <span class="keyword">this</span>.nodeToFragment(<span class="keyword">this</span>.el)   </span><br><span class="line">      <span class="comment">// 循环处理每个节点</span></span><br><span class="line">      <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.fragment)</span><br><span class="line">      <span class="comment">// 再加回去</span></span><br><span class="line">      <span class="keyword">this</span>.el.appendChild(<span class="keyword">this</span>.fragment)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Dom元素不存在'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  nodeToFragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">    <span class="keyword">let</span> child = el.firstChild <span class="comment">// △ 第一个 firstChild 是 text</span></span><br><span class="line">    <span class="keyword">while</span>(child) &#123;</span><br><span class="line">      fragment.appendChild(child) </span><br><span class="line">      <span class="comment">// appendChild 后 原始值为减少</span></span><br><span class="line">      child = el.firstChild</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment</span><br><span class="line">  &#125;,</span><br><span class="line">  compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> childNodes = el.childNodes</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(childNodes, <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line">      <span class="keyword">const</span> text = node.textContent</span><br><span class="line">      <span class="comment">// 编译解析  v-  和 on：  </span></span><br><span class="line">      <span class="keyword">if</span> (self.isElementNode(node)) &#123;</span><br><span class="line">        self.compile(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">      <span class="comment">// 编译解析 &#123;&#123;...&#125;&#125;</span></span><br><span class="line">        self.compileText(node, reg.exec(text)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 子循环</span></span><br><span class="line">      <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123; <span class="comment">// 循环遍历子节点</span></span><br><span class="line">        self.compileElement(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compile: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> nodeAttrs = node.attributes</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(nodeAttrs, <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> attrName = attr.name</span><br><span class="line">      <span class="keyword">const</span> exp = attr.value</span><br><span class="line">      <span class="keyword">const</span> dir = attrName.substring(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> (self.isDirective(attrName)) &#123; <span class="comment">// 如果指令包含 v-</span></span><br><span class="line">        <span class="keyword">if</span> (self.isEventDirective(dir)) &#123; <span class="comment">// 如果是事件指令, 包含 on:</span></span><br><span class="line">          self.compileEvent(node, self.vm, exp, dir)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// v-model 指令</span></span><br><span class="line">          self.compileModel(node, self.vm, exp)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compileText: <span class="function"><span class="keyword">function</span> (<span class="params">node, exp</span>) </span>&#123; <span class="comment">// 将 &#123;&#123;abc&#125;&#125; 替换掉</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> initText = <span class="keyword">this</span>.vm[exp]</span><br><span class="line">    <span class="keyword">this</span>.updateText(node, initText) <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="keyword">this</span>.vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="comment">// 实例化订阅者</span></span><br><span class="line">      self.updateText(node, value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compileEvent: <span class="function"><span class="keyword">function</span> (<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> eventType = dir.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> cb = vm.methods &amp;&amp; vm.methods[exp]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventType &amp;&amp; cb) &#123;</span><br><span class="line">      node.addEventListener(eventType, cb.bind(vm), <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compileModel: <span class="function"><span class="keyword">function</span> (<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = vm[exp]</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.modelUpdater(node, val)</span><br><span class="line">    node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> newValue = e.target.value</span><br><span class="line">      self.vm[exp] = newValue <span class="comment">// 实现 view 到 model 的绑定</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  updateText: <span class="function"><span class="keyword">function</span> (<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">    node.textContent = <span class="keyword">typeof</span> value === <span class="string">'undefined'</span> ? <span class="string">''</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  modelUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">    node.value = <span class="keyword">typeof</span> value === <span class="string">'undefined'</span> ? <span class="string">''</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isEventDirective: <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dir.indexOf(<span class="string">'on:'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isDirective: <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr.indexOf(<span class="string">'v-'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isElementNode: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isTextNode: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据劫持-observer"><a href="#数据劫持-observer" class="headerlink" title="数据劫持 observer"></a>数据劫持 observer</h2><p>实现数据“劫持”： 数据变动时 进行“劫持” 引发相应操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过 observe 监听数据变化，当数据变化时候，告知 Dep，调用 update 更新数据。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;,</span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//  对应 watcher 中的 update 方法</span></span><br><span class="line">      sub.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!data || <span class="keyword">typeof</span>(data) !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span></span><br><span class="line">    self.defineReactive(data, key, data[key])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  observe(value) <span class="comment">// 遍历嵌套对象</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">      <span class="comment">// 有target时 才会添加订阅 （对应watcher 中 target 设定）</span></span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123; <span class="comment">// 往订阅器添加订阅者</span></span><br><span class="line">        dep.addSub(Dep.target)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(newValue) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value !== newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'值发生变化'</span>, <span class="string">'newValue:'</span> + newValue + <span class="string">' '</span> + <span class="string">'oldValue:'</span> + value)</span><br><span class="line">        value = newValue</span><br><span class="line">        dep.notify()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Watcher：-observer-和-编译后html的桥梁"><a href="#Watcher：-observer-和-编译后html的桥梁" class="headerlink" title="Watcher： observer 和 编译后html的桥梁"></a>Watcher： observer 和 编译后html的桥梁</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Watcher 订阅者作为 observer 和 compile 之间通信的桥梁，主要做的事情是:</span></span><br><span class="line"><span class="comment">// 1、在自身实例化时往订阅器(dep)里面添加自己</span></span><br><span class="line"><span class="comment">// 2、待 model 变动 dep.notice() 通知时，能调用自身的 update() 方法，并触发 Compile 中绑定的回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cb = cb</span><br><span class="line">  <span class="keyword">this</span>.vm = vm</span><br><span class="line">  <span class="keyword">this</span>.exp = exp</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.exp]</span><br><span class="line">    <span class="keyword">const</span> oldVal = <span class="keyword">this</span>.value</span><br><span class="line">    <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span> <span class="comment">// 缓存自己</span></span><br><span class="line">    <span class="comment">// 强制执行监听器里的 get 函数 进而添加订阅</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.exp] </span><br><span class="line">    Dep.target = <span class="literal">null</span> <span class="comment">// 释放自己</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简易vue框架实现&quot;&gt;&lt;a href=&quot;#简易vue框架实现&quot; class=&quot;headerlink&quot; title=&quot;简易vue框架实现&quot;&gt;&lt;/a&gt;简易vue框架实现&lt;/h1&gt;&lt;p&gt;找到了个简单代码实现了vue的少许基本功能的例子，有助于了解vue源码，加深对框架
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字体加载优化</title>
    <link href="https://blog.dappwind.com/2018/08/21/"/>
    <id>https://blog.dappwind.com/2018/08/21/</id>
    <published>2018-08-21T09:59:33.000Z</published>
    <updated>2020-04-06T12:00:08.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字体加载-技巧"><a href="#字体加载-技巧" class="headerlink" title="字体加载 技巧"></a>字体加载 技巧</h1><p>DIN-Bold  苹果有 安卓没有</p><p>如果只用外部字体  加载时间中 该字体空白 体验不好</p><h3 id="安卓："><a href="#安卓：" class="headerlink" title="安卓："></a>安卓：</h3><p>在页面中加入 preload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//192.168.0.170:8080/style/common/fonts/DIN-Bold.woff"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">type</span>=<span class="string">"font/woff"</span> <span class="attr">crossorigin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="苹果："><a href="#苹果：" class="headerlink" title="苹果："></a>苹果：</h3><p> 不支持preload 但是苹果本来就有这个字体 如果定义外部字体为同样的名字的话 会覆盖本地字体。 所以给外部字体一个另外的名字，font-family  先写本地字体名字 再写外部字体。完美</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DIN-Bold-web'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../common/fonts/DIN-Bold.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>); <span class="comment">/* chrome, firefox */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DIN-Medium-web'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../common/fonts/DIN-Medium.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>); <span class="comment">/* chrome, firefox */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DIN-Bold</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DIN-Bold'</span>, <span class="string">'DIN-Bold-web'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DIN-Medium</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DIN-Medium'</span>,<span class="string">'DIN-Medium-web'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字体加载-技巧&quot;&gt;&lt;a href=&quot;#字体加载-技巧&quot; class=&quot;headerlink&quot; title=&quot;字体加载 技巧&quot;&gt;&lt;/a&gt;字体加载 技巧&lt;/h1&gt;&lt;p&gt;DIN-Bold  苹果有 安卓没有&lt;/p&gt;
&lt;p&gt;如果只用外部字体  加载时间中 该字体空白 体验
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域名获取Cookies-SSO</title>
    <link href="https://blog.dappwind.com/2018/08/06/"/>
    <id>https://blog.dappwind.com/2018/08/06/</id>
    <published>2018-08-06T10:49:33.000Z</published>
    <updated>2020-04-06T12:00:08.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域名获取cookies-SSO"><a href="#跨域名获取cookies-SSO" class="headerlink" title="跨域名获取cookies-SSO"></a>跨域名获取cookies-SSO</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>同一个公司多个域名，账号体系相同。要实现一处登录，多个网站可用。比如，登录了淘宝（taobao）后，域名不同的天猫（tmal）、飞猪等页面也都登录了。不同网站之间能拿到通用cookies.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-本地传递"><a href="#1-本地传递" class="headerlink" title="1. 本地传递"></a>1. 本地传递</h3><p>即通过iframe 等</p><h3 id="2-服务器传递"><a href="#2-服务器传递" class="headerlink" title="2.服务器传递"></a>2.服务器传递</h3><p>网上一堆什么jsonp的不能用的例子，其实本质就是Access-Control-Allow-Origin  当A域名下，跨域访问另一个域名B的api时 浏览器会传递B域名下的cookies而不是 A域名下的。 通过这个特性 就能通过服务器轻松获得B域名下的cookies。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/f/dj'</span>,app.getUser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Website you wish to allow to connect</span></span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'https://B-url.com'</span>)</span><br><span class="line">  <span class="comment">// Request methods you wish to allow</span></span><br><span class="line">  res.setHeader(</span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>,</span><br><span class="line">    <span class="string">'GET, POST, OPTIONS, PUT, PATCH, DELETE'</span></span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// Request headers you wish to allow</span></span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'X-Requested-With,content-type'</span>)</span><br><span class="line">  <span class="comment">// Set to true if you need the website to include cookies in the requests sent</span></span><br><span class="line">  <span class="comment">// to the API (e.g. in case you use sessions)</span></span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  res.json(&#123;</span><br><span class="line">    token: req.cookies.xq_a_token</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在A网站的服务器（node）上设置允许B网站访问。随后就可以在B网站调用这个api实现 获取A网站cookies的目的了。</p><p>跨域名获取相同的cookie 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跨域名获取cookies-SSO&quot;&gt;&lt;a href=&quot;#跨域名获取cookies-SSO&quot; class=&quot;headerlink&quot; title=&quot;跨域名获取cookies-SSO&quot;&gt;&lt;/a&gt;跨域名获取cookies-SSO&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWA 渐进式网页应用</title>
    <link href="https://blog.dappwind.com/2018/08/02/"/>
    <id>https://blog.dappwind.com/2018/08/02/</id>
    <published>2018-08-02T08:48:54.000Z</published>
    <updated>2020-04-06T12:00:08.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWA-渐进式网页应用"><a href="#PWA-渐进式网页应用" class="headerlink" title="PWA 渐进式网页应用"></a>PWA 渐进式网页应用</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h2><p>去年做保险项目时，发现雪球安卓客户端 push 新建webview 时，如果页面是用了SPA框架，加载慢 每页打开都要转圈加载。体验不好。</p><h2 id="什么是-PWA"><a href="#什么是-PWA" class="headerlink" title="什么是 PWA"></a>什么是 PWA</h2><p><a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">https://developers.google.com/web/progressive-web-apps/</a></p><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。<br>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><p>PWA 的主要特点包括下面三点：</p><ul><li>可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现</li><li>体验 - 快速响应，并且有平滑的动画响应用户的操作</li><li>粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面<br>PWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。</li></ul><h4 id="可靠"><a href="#可靠" class="headerlink" title="可靠"></a>可靠</h4><p>当用户打开我们站点时（从桌面 icon 或者从浏览器），通过 Service Worker 能够让用户在网络条件很差的情况下也能瞬间加载并且展现。<br>Service Worker 是用 JavaScript 编写的 JS 文件，能够代理请求，并且能够操作浏览器缓存，通过将缓存的内容直接返回，让请求能够瞬间完成。开发者可以预存储关键文件，可以淘汰过期的文件等等，给用户提供可靠的体验。<br>详细请看 Service Worker 介绍。</p><h4 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h4><p>如果站点加载时间超过 3s，53% 的用户会放弃等待。页面展现之后，用户期望有平滑的体验，过渡动画和快速响应。<br>为了保证首屏的加载，我们需要从设计上考虑，在内容请求完成之前，可以优先保证 App Shell 的渲染，做到和 Native App 一样的体验，App Shell 是 PWA 界面展现所需的最小资源。<br>参考 App Shell 设计规范。</p><h4 id="粘性"><a href="#粘性" class="headerlink" title="粘性"></a>粘性</h4><ul><li>PWA 是可以安装的，用户点击安装到桌面后，会在桌面创建一个 PWA 应用，并且不需要从应用商店下载</li><li>PWA 可以借助 Web App Manifest 提供给用户和 Native App 一样的沉浸式体验</li><li>PWA 可以通过给用户发送离线通知，让用户回流<br>Web App Manifest 允许开发者控制 PWA 添加到桌面，允许定制桌面图标、URL等等。<br>参考 Web App Manifest 和 Push Notification。</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>上面讲到 PWA 是兼具 Web App 和 Native App 的特征的，Web App 无版本问题、可索引也是很重要的特性。<br>总结，PWA 具有下面一些特性</p><ul><li>渐进式 - 适用于所有浏览器，因为它是以渐进式增强作为宗旨开发的</li><li>连接无关性 - 能够借助 Service Worker 在离线或者网络较差的情况下正常访问</li><li>类似应用 - 由于是在 App Shell 模型基础上开发，因为应具有 Native App 的交互和导航，给用户 Native App 的体验</li><li>持续更新 - 始终是最新的，无版本和更新问题</li><li>安全 - 通过 HTTPS 协议提供服务，防止窥探和确保内容不被篡改</li><li>可索引 - 应用清单文件和 Service Worker 可以让搜索引擎索引到，从而将其识别为『应用』</li><li>粘性 - 通过推送离线通知等，可以让用户回流</li><li>可安装 - 用户可以添加常用的 webapp 到桌面，免去去应用商店下载的麻烦</li><li>可链接 - 通过链接即可分享内容，无需下载安装</li></ul><h2 id="体验-1"><a href="#体验-1" class="headerlink" title="体验"></a>体验</h2><p>雪球保险 <a href="https://baoxian.xueqiu.com" target="_blank" rel="noopener">https://baoxian.xueqiu.com</a></p><p>试验网站 <a href="https://dappwind.com" target="_blank" rel="noopener">https://dappwind.com</a></p><p>资源缓存，web 和app打开较快，jsbridge push 不会出现转圈圈加赞。断网也可打开（雪球保险没有加，dappwind加了）， 浏览器打开时 支持添加到桌面</p><p>浏览器打开 支持添加到桌面，从桌面打开体验类似原生</p><p>￼<img src="https://xqimg.imedao.com/164f9e6a148109cf3fe56da7.png" alt="1"><br>￼<br>￼<img src="https://xqimg.imedao.com/164f9e6a2e6109d03fe6a6f5.png!custom660.jpg" alt="2"></p><p><img src="https://xqimg.imedao.com/164f9e6a59c10a9d3fe67466.png!custom660.jpg" alt="3"><br>￼</p><h3 id="打开演示"><a href="#打开演示" class="headerlink" title="打开演示"></a>打开演示</h3><p><img src="https://xqimg.imedao.com/164f47d3faa2a3fc5ff3ce56.gif" alt="4"></p><h3 id="跑分"><a href="#跑分" class="headerlink" title="跑分"></a>跑分</h3><p>昨天改了改 dappwind.com<br>lighthouse 测试<br>progressive web app 项满分<br>￼<img src="https://xqimg.imedao.com/164f9e6a008109ce3fe520fd.png!custom660.jpg" alt="5"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="主要是-service-worker-和-Web-App-Manifest"><a href="#主要是-service-worker-和-Web-App-Manifest" class="headerlink" title="主要是 service worker 和 Web App Manifest"></a>主要是 service worker 和 Web App Manifest</h3><h3 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h3><p>W3C 组织早在 2014 年 5 月就提出过 Service Worker 这样的一个 HTML5 API ，主要用来做持久的离线缓存。<br>Service Worker 有以下功能和特性：</p><ul><li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li><li>一旦被 install，就永远存在，除非被手动 unregister</li><li>用到的时候可以直接唤醒，不用的时候自动睡眠</li><li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li><li>离线内容开发者可控</li><li>能向客户端推送消息</li><li>不能直接操作 DOM</li><li>必须在 HTTPS 环境下才能工作</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><p>雪球保险PWA<br>当时模仿 vue-pwa<br>使用了个框架   <a href="https://github.com/goldhand/sw-precache-webpack-plugin#readme" target="_blank" rel="noopener">https://github.com/goldhand/sw-precache-webpack-plugin#readme</a>  ‘</p><p>当时的代码<br><a href="http://git.snowballfinance.com/f2e/baoxian/commit/8396089f457f9a5326ef9ba52aa7649b593000e2" target="_blank" rel="noopener">http://git.snowballfinance.com/f2e/baoxian/commit/8396089f457f9a5326ef9ba52aa7649b593000e2</a><br>看起来比较繁琐  完全可以先不用这个包 用基础的自己弄一个</p><h2 id="一-注册service-worker"><a href="#一-注册service-worker" class="headerlink" title="一. 注册service worker"></a>一. 注册service worker</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        navigator.serviceWorker.register(<span class="string">'sw-nasgo.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 注销操作</span></span><br><span class="line">          <span class="comment">//- registration.unregister()</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'sw-init-succeeded'</span>)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'sw-init-error'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>建议sw的注册放在 html里，防止放在js文件里 被不小心缓存了就不好弄了.</p></blockquote><blockquote><p>并增加支持注销操作 出问题可以发版注销</p></blockquote><p>scope: 标明sw作用域  不标明的话 sw只在这个js的路径下生效</p><p>关于 <code>navigator.serviceWorker.register(&#39;xq-fund-sw.js&#39;, {scope: &#39;./&#39;})</code>  的位置 </p><p>sw-fund-sw.js路径会从 当前页的上级目录开始。如果sw注册在 /f/event ，所以 swjs 路径就是 /f/sw-fund-sw.js swjs在当前路径下，就不用再配置scope了 。然后手动配置这个js文件 不走cdn.</p><p><a href="https://gitlab.com/yuxizhe/express-generate/commit/5d5b8a12151d70921f85aa7d1bd8bbde46538c82" target="_blank" rel="noopener">https://gitlab.com/yuxizhe/express-generate/commit/5d5b8a12151d70921f85aa7d1bd8bbde46538c82</a></p><p>这个文章也解释的很好 <a href="https://zhuanlan.zhihu.com/p/28161855" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28161855</a></p><h2 id="二-写sw-js-文件"><a href="#二-写sw-js-文件" class="headerlink" title="二 .  写sw.js 文件"></a>二 .  写sw.js 文件</h2><h4 id="1-方法1-自己写原生js"><a href="#1-方法1-自己写原生js" class="headerlink" title="1.方法1 自己写原生js"></a>1.方法1 自己写原生js</h4><p>￼<img src="https://xqimg.imedao.com/164f9e6a353109d13fe67adc.png!custom660.jpg" alt="5"><br>￼</p><h4 id="2-方法2-用库-谷歌出品"><a href="#2-方法2-用库-谷歌出品" class="headerlink" title="2.方法2 用库 谷歌出品"></a>2.方法2 用库 谷歌出品</h4><p>sw-toolbox  谷歌离线缓存</p><blockquote><p><a href="https://github.com/GoogleChromeLabs/sw-toolbox" target="_blank" rel="noopener">https://github.com/GoogleChromeLabs/sw-toolbox</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'sw-toolbox.js'</span>)</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, event =&gt; &#123;</span><br><span class="line">  <span class="comment">//取消更新后的等待</span></span><br><span class="line">  self.skipWaiting();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">toolbox.router.get(<span class="regexp">/(.png|.jpg)/</span>, toolbox.cacheFirst, &#123;</span><br><span class="line">  cache: &#123;</span><br><span class="line">      name: <span class="string">"sw-nasgo-img"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">toolbox.router.get(<span class="regexp">/http.*(.js|.css)/</span>, toolbox.cacheFirst, &#123;</span><br><span class="line">  cache: &#123;</span><br><span class="line">      name: <span class="string">"sw-nasgo-jscss"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页缓存</span></span><br><span class="line">toolbox.router.get(<span class="string">'/'</span>, toolbox.networkFirst, &#123;</span><br><span class="line">  cache: &#123;</span><br><span class="line">      name: <span class="string">"html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口缓存</span></span><br><span class="line">toolbox.router.get(<span class="regexp">/list/</span>, toolbox.networkFirst, &#123;</span><br><span class="line">  cache: &#123;</span><br><span class="line">      name: <span class="string">"json"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中 <code>self.skipWaiting();</code> 是因为 文件更新后，不会自动更新 会进入等待更新的状态</p><p><img src="https://ws1.sinaimg.cn/mw690/6b201a41ly1ftvhehmjs5j20j408hwfc.jpg" alt></p><p><img src="https://ws1.sinaimg.cn/mw690/6b201a41ly1ftvhg7f31uj20ph0i9grf.jpg" alt></p><blockquote><p><a href="https://googlechromelabs.github.io/sw-toolbox/api.html#options" target="_blank" rel="noopener">https://googlechromelabs.github.io/sw-toolbox/api.html#options</a></p></blockquote><p>service worker.js 增加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>, event =&gt; &#123;</span><br><span class="line"><span class="comment">//取消更新后的等待</span></span><br><span class="line">self.skipWaiting();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>即可</p><p>状态管理</p><blockquote><p><a href="https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle?hl=zh-cn" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle?hl=zh-cn</a></p></blockquote><h3 id="sw-toolbox-缓存策略"><a href="#sw-toolbox-缓存策略" class="headerlink" title="sw-toolbox 缓存策略"></a>sw-toolbox 缓存策略</h3><p>Handlers<br>There are five built-in handlers to cover the most common network strategies. For more information about offline strategies see the Offline Cookbook.</p><h4 id="toolbox-networkFirst"><a href="#toolbox-networkFirst" class="headerlink" title="toolbox.networkFirst"></a>toolbox.networkFirst</h4><p>Try to handle the request by fetching from the network. If it succeeds, store the response in the cache. Otherwise, try to fulfill the request from the cache. This is the strategy to use for basic read-through caching. It’s also good for API requests where you always want the freshest data when it is available but would rather have stale data than no data.</p><h4 id="toolbox-cacheFirst"><a href="#toolbox-cacheFirst" class="headerlink" title="toolbox.cacheFirst"></a>toolbox.cacheFirst</h4><p>If the request matches a cache entry, respond with that. Otherwise try to fetch the resource from the network. If the network request succeeds, update the cache. This option is good for resources that don’t change, or have some other update mechanism.</p><h4 id="toolbox-fastest"><a href="#toolbox-fastest" class="headerlink" title="toolbox.fastest"></a>toolbox.fastest</h4><p>Request the resource from both the cache and the network in parallel. Respond with whichever returns first. Usually this will be the cached version, if there is one. On the one hand this strategy will always make a network request, even if the resource is cached. On the other hand, if/when the network request completes the cache is updated, so that future cache reads will be more up-to-date.</p><h4 id="toolbox-cacheOnly"><a href="#toolbox-cacheOnly" class="headerlink" title="toolbox.cacheOnly"></a>toolbox.cacheOnly</h4><p>Resolve the request from the cache, or fail. This option is good for when you need to guarantee that no network request will be made, for example saving battery on mobile.</p><h4 id="toolbox-networkOnly"><a href="#toolbox-networkOnly" class="headerlink" title="toolbox.networkOnly"></a>toolbox.networkOnly</h4><p>Handle the request by trying to fetch the URL from the network. If the fetch fails, fail the request. Essentially the same as not creating a route for the URL at all.</p><h3 id="sw-precache-预缓存"><a href="#sw-precache-预缓存" class="headerlink" title="sw-precache  预缓存"></a>sw-precache  预缓存</h3><h3 id="https-github-com-GoogleChromeLabs-sw-precache"><a href="#https-github-com-GoogleChromeLabs-sw-precache" class="headerlink" title="https://github.com/GoogleChromeLabs/sw-precache"></a><a href="https://github.com/GoogleChromeLabs/sw-precache" target="_blank" rel="noopener">https://github.com/GoogleChromeLabs/sw-precache</a></h3><p>加载CDN资源会有跨域问题，要自己更改模板<br>经过保险的测试 可控性不太好  容易出问题 比如环境切换时，最后只用了sw-toolbox</p><h1 id="Web-App-Manifest"><a href="#Web-App-Manifest" class="headerlink" title="Web App Manifest"></a>Web App Manifest</h1><p>添加到主屏幕<br>PWA 提供了 manifest.json 配置文件，可以让开发者自定义添加至桌面时的图标、显示名称、启动方式等等信息，并提供 API 方便开发者管理网络应用安装横幅，让用户可以方便快捷地将您的站点添加到主屏幕中。</p><p>网络推送通知<br>即使在浏览器关闭的情况下，网络推送通知也可以像原生 APP 那样进行消息推送，并且将推送的消息显示在通知栏里。推送通知将分为以下两部分内容进行说明：</p><ul><li>如何实现消息推送：使用入门</li><li>如何实现消息通知：使用入门</li></ul><p><img src="https://xqimg.imedao.com/164f9e6a59c10a9d3fe67466.png!custom660.jpg" alt></p><p><img src="https://xqimg.imedao.com/164f47d3faa2a3fc5ff3ce56.gif" alt="4"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"DappWind"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"DappWind"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"."</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#3fadc5"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"https://xqimg.imedao.com/164efd7cebf1ab3fd3636361.png"</span>,  </span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,  </span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"https://xqimg.imedao.com/164efd789df1bb3fbcf194ec.png"</span>,  </span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"512x512"</span>,  </span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现ios 也部分支持<br>￼</p><p>￼</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PWA-渐进式网页应用&quot;&gt;&lt;a href=&quot;#PWA-渐进式网页应用&quot; class=&quot;headerlink&quot; title=&quot;PWA 渐进式网页应用&quot;&gt;&lt;/a&gt;PWA 渐进式网页应用&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DAPP开发指北</title>
    <link href="https://blog.dappwind.com/2018/06/30/"/>
    <id>https://blog.dappwind.com/2018/06/30/</id>
    <published>2018-06-30T09:47:45.000Z</published>
    <updated>2020-04-06T12:00:08.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DAPP开发指北"><a href="#DAPP开发指北" class="headerlink" title="DAPP开发指北"></a>DAPP开发指北</h1><h2 id="区块链印象"><a href="#区块链印象" class="headerlink" title="区块链印象"></a>区块链印象</h2><p>大家的印象： </p><ul><li>泡沫、传销、骗钱的、蹭热点</li><li>需要很高深的数学和后端功底才能参与</li><li>跟前端没啥关系</li></ul><p>实际并不是这样，前端会有很大的价值。</p><ul><li>无需后端 decentralized applications 无需后端服务</li><li>eth智能合约 语法来源于 js</li><li>星云链智能合约 就是js</li></ul><p>所以只要前端就可以开发完整dapp了。</p><h2 id="DAPP"><a href="#DAPP" class="headerlink" title="DAPP"></a>DAPP</h2><p>去中心化应用也被称为DApp（decentralized applications）</p><blockquote><p>路线图 <a href="https://medium.freecodecamp.org/the-authoritative-guide-to-blockchain-development-855ab65b58bc" target="_blank" rel="noopener">https://medium.freecodecamp.org/the-authoritative-guide-to-blockchain-development-855ab65b58bc</a></p></blockquote><blockquote><p>翻译 <a href="https://juejin.im/post/5a706c1d51882573497934ce" target="_blank" rel="noopener">https://juejin.im/post/5a706c1d51882573497934ce</a></p></blockquote><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>无需后端</p><h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>相当于后端</p><blockquote><p>solidity <a href="https://solidity.readthedocs.io/en/v0.4.24/" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/v0.4.24/</a></p></blockquote><blockquote><p>开发工具 remix <a href="https://remix.ethereum.org/" target="_blank" rel="noopener">https://remix.ethereum.org/</a></p></blockquote><h2 id="星云链"><a href="#星云链" class="headerlink" title="星云链"></a>星云链</h2><blockquote><p>官网 <a href="https://nebulas.io/" target="_blank" rel="noopener">https://nebulas.io/</a></p></blockquote><blockquote><p>git <a href="https://github.com/nebulasio" target="_blank" rel="noopener">https://github.com/nebulasio</a></p></blockquote><blockquote><p>激励计划 <a href="https://nebulas.io/cn/incentive.html" target="_blank" rel="noopener">https://nebulas.io/cn/incentive.html</a></p></blockquote><blockquote><p>邀请链接 多10NAS <a href="https://incentive.nebulas.io/cn/signup.html?invite=TUZWm" target="_blank" rel="noopener">https://incentive.nebulas.io/cn/signup.html?invite=TUZWm</a></p></blockquote><h2 id="钱包安装"><a href="#钱包安装" class="headerlink" title="钱包安装"></a>钱包安装</h2><ul><li>本地web版<blockquote><p><a href="https://github.com/nebulasio/web-wallet" target="_blank" rel="noopener">https://github.com/nebulasio/web-wallet</a><br>使用例子 <a href="https://juejin.im/post/5b02301d51882542682e80a1" target="_blank" rel="noopener">https://juejin.im/post/5b02301d51882542682e80a1</a></p></blockquote></li><li>chrome插件<blockquote><p><a href="https://chrome.google.com/webstore/detail/gehjkhmhclgnkkhpfamakecfgakkfkco" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/gehjkhmhclgnkkhpfamakecfgakkfkco</a></p></blockquote></li><li>手机钱包<blockquote><p><a href="https://nano.nebulas.io/" target="_blank" rel="noopener">https://nano.nebulas.io/</a></p></blockquote></li><li>浏览器<blockquote><p><a href="https://explorer.nebulas.io/#/" target="_blank" rel="noopener">https://explorer.nebulas.io/#/</a></p></blockquote></li></ul><h2 id="Dapp-简单例子"><a href="#Dapp-简单例子" class="headerlink" title="Dapp 简单例子"></a>Dapp 简单例子</h2><ul><li>钱包助手<ul><li>绑定钱包后，金额变动自动获得邮件提醒。主要是把用户数据存在链上。无需数据库。<blockquote><p><a href="https://yuxizhe.github.io/cdn/nasmail/#/" target="_blank" rel="noopener">https://yuxizhe.github.io/cdn/nasmail/#/</a></p></blockquote></li></ul></li></ul><h2 id="智能合约-1"><a href="#智能合约-1" class="headerlink" title="智能合约"></a>智能合约</h2><ul><li>钱包助手简单例子 <ul><li>主要用到了存储和查询。智能合约的计算功能没有用到。<blockquote><p><a href="https://explorer.nebulas.io/#/tx/601470431ba3991e80a2e7d56208e2c35110567769ff7e62b2c33ee0393a1159" target="_blank" rel="noopener">https://explorer.nebulas.io/#/tx/601470431ba3991e80a2e7d56208e2c35110567769ff7e62b2c33ee0393a1159</a></p></blockquote></li></ul></li></ul><h2 id="前端与智能合约交互"><a href="#前端与智能合约交互" class="headerlink" title="前端与智能合约交互"></a>前端与智能合约交互</h2><ul><li><p>nebPay.js 浏览器用</p><blockquote><p><a href="https://github.com/nebulasio/nebPay" target="_blank" rel="noopener">https://github.com/nebulasio/nebPay</a></p></blockquote></li><li><p>neb.js 服务器用 浏览器也能用</p><blockquote><p><a href="https://github.com/nebulasio/neb.js" target="_blank" rel="noopener">https://github.com/nebulasio/neb.js</a></p></blockquote></li></ul><h2 id="网页部署"><a href="#网页部署" class="headerlink" title="网页部署"></a>网页部署</h2><ul><li><p>github pages</p></li><li><p>coding pages</p></li><li><p>gitlab pages</p></li><li><p>自己买空间</p></li></ul><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><ul><li>阿里云 top 域名<blockquote><p><a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.293.e9396d3eVAXnkU" target="_blank" rel="noopener">https://wanwang.aliyun.com/?spm=5176.8142029.388261.293.e9396d3eVAXnkU</a></p></blockquote></li><li>免费顶级域名 <blockquote><p><a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">https://my.freenom.com/domains.php</a></p></blockquote></li></ul><h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><ul><li>需购买国内服务器。 淘宝有便宜的，可备案</li></ul><h2 id="免费领NAS"><a href="#免费领NAS" class="headerlink" title="免费领NAS"></a>免费领NAS</h2><blockquote><p><a href="http://nasgo.top/" target="_blank" rel="noopener">http://nasgo.top/</a></p></blockquote><h2 id="祝大家提交DAPP成功！"><a href="#祝大家提交DAPP成功！" class="headerlink" title="祝大家提交DAPP成功！"></a>祝大家提交DAPP成功！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DAPP开发指北&quot;&gt;&lt;a href=&quot;#DAPP开发指北&quot; class=&quot;headerlink&quot; title=&quot;DAPP开发指北&quot;&gt;&lt;/a&gt;DAPP开发指北&lt;/h1&gt;&lt;h2 id=&quot;区块链印象&quot;&gt;&lt;a href=&quot;#区块链印象&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pdf自动分页</title>
    <link href="https://blog.dappwind.com/2018/05/10/"/>
    <id>https://blog.dappwind.com/2018/05/10/</id>
    <published>2018-05-10T02:40:51.000Z</published>
    <updated>2020-04-06T12:00:08.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动分页"><a href="#自动分页" class="headerlink" title="自动分页"></a>自动分页</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">autoSplitPages</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> blocks = $(<span class="string">'.block'</span>)</span><br><span class="line">  <span class="keyword">var</span> group = []</span><br><span class="line">  <span class="keyword">var</span> groupHeight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  blocks.map(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    groupHeight += <span class="keyword">this</span>.clientHeight</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.clientHeight)</span><br><span class="line">    <span class="keyword">var</span> newPage = <span class="keyword">this</span>.className.indexOf(<span class="string">'newPage'</span>) &gt; <span class="number">-1</span></span><br><span class="line">    <span class="keyword">var</span> close = pageClose.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页条件 高度超过1100 或者 block有手动分页标记class .newPage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (groupHeight &gt; <span class="number">1000</span> || newPage) &#123;</span><br><span class="line">      close()</span><br><span class="line">    &#125;</span><br><span class="line">    group.push(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一页</span></span><br><span class="line">    <span class="keyword">if</span> (index == blocks.length - <span class="number">1</span>) &#123;</span><br><span class="line">      close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">pageClose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(groupHeight)</span><br><span class="line">    <span class="built_in">console</span>.log(group)</span><br><span class="line">    groupHeight = <span class="keyword">this</span>.clientHeight</span><br><span class="line">    $(group).wrapAll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"&lt;div class='phantomPaper'&gt;&lt;/div&gt;"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    group = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动分页&quot;&gt;&lt;a href=&quot;#自动分页&quot; class=&quot;headerlink&quot; title=&quot;自动分页&quot;&gt;&lt;/a&gt;自动分页&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack4vue简单项目</title>
    <link href="https://blog.dappwind.com/2018/05/03/"/>
    <id>https://blog.dappwind.com/2018/05/03/</id>
    <published>2018-05-03T07:57:52.000Z</published>
    <updated>2020-04-06T12:00:08.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不想用vue-cli了"><a href="#不想用vue-cli了" class="headerlink" title="不想用vue-cli了"></a>不想用vue-cli了</h1><p>今天更新了一下vue-cli..感觉变化太大了，之前熟悉的那些配置文件都没了。。。有种跟不上时代的感觉。vue-cli变化这么大。。我就不用了。虽然说vue-cli是3.0。  但是依旧没有使用最近的webpack4.0。  直接用webpack4.0吧</p><h1 id="安装分析"><a href="#安装分析" class="headerlink" title="安装分析"></a>安装分析</h1><p>一直对把框架文件打包在一块儿的做法很不解，对于我们这种没买CDN的，光一个vue打包后就60k,包很大。所以就把引用文件写在html里，只把自己写的代码进行webpack打包。也可以在老项目上用。vue  vue-router 都可以用这种方法。</p><h1 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h1><p>新的webpack4 说是0配置，跟着官方第一个课程走，确实很方便。 反正前端框架变化很大，现在现学，跟用很久的人没区别。</p><blockquote><p><a href="https://doc.webpack-china.org/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">https://doc.webpack-china.org/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85</a><br>配置个入口就行了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'main.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h1><p>本来不想用.vue的文件来着，后来分开完全是在倒退，所以还是用vue-loader吧，中文文档连手动配置vue-loader都没有。英文文档才有。。有种被自己人歧视的感觉</p><blockquote><p><a href="https://vue-loader.vuejs.org/guide/" target="_blank" rel="noopener">https://vue-loader.vuejs.org/guide/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不想用vue-cli了&quot;&gt;&lt;a href=&quot;#不想用vue-cli了&quot; class=&quot;headerlink&quot; title=&quot;不想用vue-cli了&quot;&gt;&lt;/a&gt;不想用vue-cli了&lt;/h1&gt;&lt;p&gt;今天更新了一下vue-cli..感觉变化太大了，之前熟悉的那些配置文
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>复杂Pdf前端自动生成</title>
    <link href="https://blog.dappwind.com/2018/05/02/"/>
    <id>https://blog.dappwind.com/2018/05/02/</id>
    <published>2018-05-02T02:21:43.000Z</published>
    <updated>2020-04-06T12:00:08.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复杂pdf前端自动生成"><a href="#复杂pdf前端自动生成" class="headerlink" title="复杂pdf前端自动生成"></a>复杂pdf前端自动生成</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>私募每月要生成近200份基金月报，每个月报上图表很多，运营手工制作枯燥且时间来不及。想要个自动生成pdf月报的功能。</p><blockquote><p>月报例子</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="1-页面截图-再生成pdf"><a href="#1-页面截图-再生成pdf" class="headerlink" title="1.页面截图 再生成pdf"></a>1.页面截图 再生成pdf</h2><p>html2canvas</p><blockquote><p>官网 <a href="https://html2canvas.hertzen.com/" target="_blank" rel="noopener">https://html2canvas.hertzen.com/</a></p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>简单，百度中文教程多</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>pdf文字不可选，多页样式有问题</p><h2 id="2-PDFKit"><a href="#2-PDFKit" class="headerlink" title="2.PDFKit"></a>2.PDFKit</h2><p>A JavaScript PDF generation library for Node and the browser.</p><blockquote><p>官网  <a href="http://pdfkit.org/" target="_blank" rel="noopener">http://pdfkit.org/</a></p></blockquote><blockquote><p>例子  <a href="http://pdfkit.org/demo/browser.html" target="_blank" rel="noopener">http://pdfkit.org/demo/browser.html</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a document and pipe to a blob</span></span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">new</span> PDFDocument();</span><br><span class="line"><span class="keyword">var</span> stream = doc.pipe(blobStream());</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw some text</span></span><br><span class="line">doc.fontSize(<span class="number">25</span>)</span><br><span class="line">   .text(<span class="string">'Here is some vector graphics...'</span>, <span class="number">100</span>, <span class="number">80</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// some vector graphics</span></span><br><span class="line">doc.save()</span><br><span class="line">   .moveTo(<span class="number">100</span>, <span class="number">150</span>)</span><br><span class="line">   .lineTo(<span class="number">100</span>, <span class="number">250</span>)</span><br><span class="line">   .lineTo(<span class="number">200</span>, <span class="number">250</span>)</span><br><span class="line">   .fill(<span class="string">"#FF3300"</span>);</span><br><span class="line">   </span><br><span class="line">doc.circle(<span class="number">280</span>, <span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">   .fill(<span class="string">"#6600FF"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>样式好看，支持svg等。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>需要单独写代码，不通用，图表不好加。</p><h1 id="3-phantomjs"><a href="#3-phantomjs" class="headerlink" title="3.phantomjs"></a>3.phantomjs</h1><p>PhantomJS是一个无界面的,可脚本编程的WebKit浏览器引擎。它原生支持多种web 标准：DOM 操作，CSS选择器，JSON，Canvas 以及SVG。</p><blockquote><p>官网 <a href="http://phantomjs.org/" target="_blank" rel="noopener">http://phantomjs.org/</a></p></blockquote><p>安装比较麻烦，要手动下载，配置环境变量。</p><blockquote><p>alias phantomjs=’~/PATH/TO/phantomjs’</p></blockquote><p>使用它自己的命令行操作。虽然有个npm的版本，但是样式有问题。</p><p>生成pdf的官方例子</p><blockquote><p>例子 <a href="https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js" target="_blank" rel="noopener">https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page.viewportSize = &#123; <span class="attr">width</span>: <span class="number">600</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (system.args.length &gt; <span class="number">3</span> &amp;&amp; system.args[<span class="number">2</span>].substr(<span class="number">-4</span>) === <span class="string">".pdf"</span>) &#123;      size = system.args[<span class="number">3</span>].split(<span class="string">'*'</span>);</span><br><span class="line">        page.paperSize = size.length === <span class="number">2</span> ? &#123; <span class="attr">width</span>: size[<span class="number">0</span>], <span class="attr">height</span>: size[<span class="number">1</span>], <span class="attr">margin</span>: <span class="string">'0px'</span> &#125; : &#123; <span class="attr">format</span>: system.args[<span class="number">3</span>], <span class="attr">orientation</span>: <span class="string">'portrait'</span>, <span class="attr">margin</span>: <span class="string">'1cm'</span> &#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>命令格式 为 </p><p>路径 + 配置js + 目标url + 保存文件名 + 页面参数</p><p>路径设置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phantomjs = <span class="string">'/Users/yu/Downloads/phantomjs-2.1.1-macosx/bin/phantomjs'</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://localhost:8080/#/monthPaper'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  phantomjs = <span class="string">'/home/app/yuxizhe/phantomjs-2.1.1-linux-x86_64/bin/phantomjs'</span></span><br><span class="line">  </span><br><span class="line">  url = <span class="string">'http://localhost:7878/#/monthPaper'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要手动设置页面px参数，要不然截不全</p><p>获取不到页面渲染完成的状态<br>官方例子中的 status === ‘success’  只是页面加载成o<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">page.open(address, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status !== <span class="string">'success'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Unable to load the address!'</span>);</span><br><span class="line">            phantom.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                page.render(output);</span><br><span class="line">                phantom.exit();</span><br><span class="line">            &#125;, <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>生成的pdf文字可选，较成熟</p><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>安装配置不方便，运行要调用子进程，需要手动设置页面大小，无法获知是否渲染完成，在私募不可用</p><h1 id="4-puppeteer-ˌpvpɪˈtɪr"><a href="#4-puppeteer-ˌpvpɪˈtɪr" class="headerlink" title="4.puppeteer  [ˌpʌpɪˈtɪr]"></a>4.puppeteer  [ˌpʌpɪˈtɪr]</h1><p>天宇上周介绍的，chrome官方</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i puppeteer</span><br></pre></td></tr></table></figure></p><p>国内不下载chrome 版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i puppeteer-cn</span><br></pre></td></tr></table></figure></p><blockquote><p>国内说明 <a href="https://npm.taobao.org/package/puppeteer-cn" target="_blank" rel="noopener">https://npm.taobao.org/package/puppeteer-cn</a></p></blockquote><p>官方pdf例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://news.ycombinator.com'</span>, &#123;<span class="attr">waitUntil</span>: <span class="string">'networkidle2'</span>&#125;);</span><br><span class="line">  <span class="keyword">await</span> page.pdf(&#123;<span class="attr">path</span>: <span class="string">'hn.pdf'</span>, <span class="attr">format</span>: <span class="string">'A4'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><p>文字可选</p><p>调用puppeteer时，不用配置页面具体px了，只要保证比例是A4就可以</p><p>不用设置setTimeout来等待页面渲染完成，可以配置 waitUntil</p><p>node使用方便</p><h4 id="waitUntil-参数"><a href="#waitUntil-参数" class="headerlink" title="waitUntil 参数"></a>waitUntil 参数</h4><blockquote><p>waitUntil &lt;string|Array<string>&gt; When to consider navigation succeeded, defaults to load. Given an array of event strings, navigation is considered to be successful after all events have been fired. Events can be either:</string></p></blockquote><blockquote><p>  load - consider navigation to be finished when the load event is fired.</p></blockquote><blockquote><p>  domcontentloaded - consider navigation to be finished when the DOMContentLoaded event is fired.</p></blockquote><blockquote><p>  networkidle0 - consider navigation to be finished when there are no more than 0 network connections for at least 500 ms.</p></blockquote><blockquote><p>  networkidle2 - consider navigation to be finished when there are no more than 2 network connections for at least 500 ms.</p></blockquote><p>本地使用networkidle2，服务器使用networkidle0</p><p>本地使用 networkidle0 会超时，服务器使用 networkidle2 会提前结束</p><h3 id="其他服务器安装报错解决"><a href="#其他服务器安装报错解决" class="headerlink" title="其他服务器安装报错解决"></a>其他服务器安装报错解决</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/x86_64-linux-gnu/libnss3.so: version `NSS_3.22&apos; not found</span><br><span class="line"></span><br><span class="line">Failed to launch chrome!</span><br></pre></td></tr></table></figure><blockquote><p>ubuntu16.04 安装chrome 或 chromium无法启动问题解决 <a href="https://blog.csdn.net/qq_22551385/article/details/78172178" target="_blank" rel="noopener">https://blog.csdn.net/qq_22551385/article/details/78172178</a></p></blockquote><p>服务器要安装下 NSS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install --reinstall libnss3</span><br></pre></td></tr></table></figure></p><h4 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: Failed to launch chrome!</span><br><span class="line">[0428/142657.340238:ERROR:zygote_host_impl_linux.cc(88)] Running as root without --no-sandbox is not supported. See https://crbug.com/638180.</span><br></pre></td></tr></table></figure><p>root 环境下运行要加参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const browser = await puppeteer.launch(&#123;</span><br><span class="line">    args: [&apos;--no-sandbox&apos;]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="报错-2"><a href="#报错-2" class="headerlink" title="报错"></a>报错</h3><p>服务器超时，默认设置超时为5000。私募最慢的接口要3分钟。。所以要加长些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">await page.goto(url, &#123;</span><br><span class="line">  waitUntil: waitUntil,</span><br><span class="line">  timeout: 3000000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="页面设置及调试"><a href="#页面设置及调试" class="headerlink" title="页面设置及调试"></a>页面设置及调试</h1><p>暂时解决分页问题，定义单个页面宽高 794px 1123px</p><p>做到页面web端浏览/生成pdf 复用， 用 @print 配置相应css 某些不显示等等</p><h1 id="服务器字体安装"><a href="#服务器字体安装" class="headerlink" title="服务器字体安装"></a>服务器字体安装</h1><p>因为pdf在服务器生成，所以用的是服务器的字体，有些字体没有，生成出来很不好看</p><blockquote><p>将字体文件夹全部复制到/usr/share/fonts/目录下<br>在终端中依次输入以下三条命令：</p></blockquote><blockquote><p>sudo mkfontscale</p></blockquote><blockquote><p>sudo mkfontdir</p></blockquote><blockquote><p>sudo fc-cache -fv</p></blockquote><h1 id="待解决"><a href="#待解决" class="headerlink" title="待解决"></a>待解决</h1><p>页面内容自动分页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复杂pdf前端自动生成&quot;&gt;&lt;a href=&quot;#复杂pdf前端自动生成&quot; class=&quot;headerlink&quot; title=&quot;复杂pdf前端自动生成&quot;&gt;&lt;/a&gt;复杂pdf前端自动生成&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Puppeteer</title>
    <link href="https://blog.dappwind.com/2018/04/26/"/>
    <id>https://blog.dappwind.com/2018/04/26/</id>
    <published>2018-04-25T16:04:17.000Z</published>
    <updated>2020-04-06T12:00:08.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h1><p>神奇的headless chrome 。今天前端分享会，天宇分享的。感觉很不错，比phantom简单好用。可以知道页面渲染完成。代码也是很简单。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://baoxian.xueqiu.com'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'example.png'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>so easy</p><p>安装时会下载一个chrome,比较慢。可以用国内的源代替。  puppeteer-cn </p><blockquote><p><a href="https://npm.taobao.org/package/puppeteer-cn" target="_blank" rel="noopener">https://npm.taobao.org/package/puppeteer-cn</a></p></blockquote><p>试了下，很好用。回头把phantomjs 的月报改成这个的。</p><h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><p>感觉区块链完全是前端的天下。server less。 只剩前端dapp。  web3js.<br>学习下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;puppeteer&quot;&gt;&lt;a href=&quot;#puppeteer&quot; class=&quot;headerlink&quot; title=&quot;puppeteer&quot;&gt;&lt;/a&gt;puppeteer&lt;/h1&gt;&lt;p&gt;神奇的headless chrome 。今天前端分享会，天宇分享的。感觉很不错，比p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>批量Doc变量更新</title>
    <link href="https://blog.dappwind.com/2018/04/20/"/>
    <id>https://blog.dappwind.com/2018/04/20/</id>
    <published>2018-04-20T08:31:02.000Z</published>
    <updated>2020-04-06T12:00:08.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量doc变量更新"><a href="#批量doc变量更新" class="headerlink" title="批量doc变量更新"></a>批量doc变量更新</h1><p>今天临时有个运营的同事跑过来，她们有个急迫的任务，要根据excel里面每一行数据生成一个word文档。大概50多份，下班前要弄完。</p><p>派我出马，初步想 word转html excel转json vue替换。</p><p>word自己的另存为html 再打印时，样式会乱。就网上找了个，很方便 </p><blockquote><p><a href="http://www.docpe.com/word/word-to-html.aspx" target="_blank" rel="noopener">http://www.docpe.com/word/word-to-html.aspx</a></p></blockquote><p>生成的html打印出来样式一样。</p><p>之后是 excel转 json 网上的工具依然方便</p><blockquote><p><a href="https://www.bejson.com/json/col2json/" target="_blank" rel="noopener">https://www.bejson.com/json/col2json/</a></p></blockquote><p>随后vue替换，$route.query.num 作为变量。轻松加愉快</p><p>处理打钩的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getFill(data)&#123;</span><br><span class="line">      <span class="keyword">return</span> data ? <span class="string">'■'</span> : <span class="string">'□'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;批量doc变量更新&quot;&gt;&lt;a href=&quot;#批量doc变量更新&quot; class=&quot;headerlink&quot; title=&quot;批量doc变量更新&quot;&gt;&lt;/a&gt;批量doc变量更新&lt;/h1&gt;&lt;p&gt;今天临时有个运营的同事跑过来，她们有个急迫的任务，要根据excel里面每一行数据生成
      
    
    </summary>
    
    
  </entry>
  
</feed>
